//
//  ProtobufDataStruct.swift
//  LSVideoPlayer Watch App
//
//  Created by 凌嘉徽 on 2024/1/21.
//

import Foundation
//
//  弹幕Protobuf数据结构.swift
//  WatchBili Watch App
//
//  Created by 凌嘉徽 on 2023/9/18.
//

import Foundation
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dm.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Bilibili_Community_Service_Dm_V1_AvatarType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case nft // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .nft
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .nft: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_AvatarType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_AvatarType] = [
    .none,
    .nft,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_BubbleType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case clickButton // = 1
  case dmSettingPanel // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .clickButton
    case 2: self = .dmSettingPanel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .clickButton: return 1
    case .dmSettingPanel: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_BubbleType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_BubbleType] = [
    .none,
    .clickButton,
    .dmSettingPanel,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_CheckboxType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case encourage // = 1
  case colorDm // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .encourage
    case 2: self = .colorDm
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .encourage: return 1
    case .colorDm: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_CheckboxType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_CheckboxType] = [
    .none,
    .encourage,
    .colorDm,
  ]
}

#endif  // swift(>=4.2)

/// 弹幕属性位值
enum Bilibili_Community_Service_Dm_V1_DMAttrBit: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 保护弹幕
  case protect // = 0

  /// 直播弹幕
  case fromLive // = 1

  /// 高赞弹幕
  case dmattrHighLike // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .protect
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .protect
    case 1: self = .fromLive
    case 2: self = .dmattrHighLike
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .protect: return 0
    case .fromLive: return 1
    case .dmattrHighLike: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_DMAttrBit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_DMAttrBit] = [
    .protect,
    .fromLive,
    .dmattrHighLike,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_DmColorfulType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// 无
  case noneType // = 0

  /// 渐变色
  case vipGradualColor // = 60001
  case UNRECOGNIZED(Int)

  init() {
    self = .noneType
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noneType
    case 60001: self = .vipGradualColor
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .noneType: return 0
    case .vipGradualColor: return 60001
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_DmColorfulType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_DmColorfulType] = [
    .noneType,
    .vipGradualColor,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_ExposureType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case dmsend // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .dmsend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .dmsend: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_ExposureType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_ExposureType] = [
    .none,
    .dmsend,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_PostPanelBizType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case encourage // = 1
  case colorDm // = 2
  case nftdm // = 3
  case fragClose // = 4
  case recommend // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .encourage
    case 2: self = .colorDm
    case 3: self = .nftdm
    case 4: self = .fragClose
    case 5: self = .recommend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .encourage: return 1
    case .colorDm: return 2
    case .nftdm: return 3
    case .fragClose: return 4
    case .recommend: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_PostPanelBizType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_PostPanelBizType] = [
    .none,
    .encourage,
    .colorDm,
    .nftdm,
    .fragClose,
    .recommend,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_PostStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case normal // = 0
  case closed // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .normal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .closed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .normal: return 0
    case .closed: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_PostStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_PostStatus] = [
    .normal,
    .closed,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_RenderType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case single // = 1
  case rotation // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .single
    case 2: self = .rotation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .single: return 1
    case .rotation: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_RenderType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_RenderType] = [
    .none,
    .single,
    .rotation,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_SubtitleAiStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case exposure // = 1
  case assist // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .exposure
    case 2: self = .assist
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .exposure: return 1
    case .assist: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_SubtitleAiStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_SubtitleAiStatus] = [
    .none,
    .exposure,
    .assist,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_SubtitleAiType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case normal // = 0
  case translate // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .normal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .translate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .normal: return 0
    case .translate: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_SubtitleAiType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_SubtitleAiType] = [
    .normal,
    .translate,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_SubtitleType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// CC字幕
  case cc // = 0

  /// AI生成字幕
  case ai // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .cc
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cc
    case 1: self = .ai
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .cc: return 0
    case .ai: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_SubtitleType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_SubtitleType] = [
    .cc,
    .ai,
  ]
}

#endif  // swift(>=4.2)

enum Bilibili_Community_Service_Dm_V1_ToastFunctionType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case postPanel // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .postPanel
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .postPanel: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bilibili_Community_Service_Dm_V1_ToastFunctionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bilibili_Community_Service_Dm_V1_ToastFunctionType] = [
    .none,
    .postPanel,
  ]
}

#endif  // swift(>=4.2)

struct Bilibili_Community_Service_Dm_V1_Avatar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var url: String = String()

  var avatarType: Bilibili_Community_Service_Dm_V1_AvatarType = .none

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Bubble {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_BubbleV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var url: String = String()

  var bubbleType: Bilibili_Community_Service_Dm_V1_BubbleType = .none

  var exposureOnce: Bool = false

  var exposureType: Bilibili_Community_Service_Dm_V1_ExposureType = .none

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Button {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var action: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_BuzzwordConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keywords: [Bilibili_Community_Service_Dm_V1_BuzzwordShowConfig] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_BuzzwordShowConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var schema: String = String()

  var source: Int32 = 0

  var id: Int64 = 0

  var buzzwordID: Int64 = 0

  var schemaType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_CheckBox {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var type: Bilibili_Community_Service_Dm_V1_CheckboxType = .none

  var defaultValue: Bool = false

  var show: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_CheckBoxV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var type: Int32 = 0

  var defaultValue: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_ClickButton {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portraitText: [String] = []

  var landscapeText: [String] = []

  var portraitTextFocus: [String] = []

  var landscapeTextFocus: [String] = []

  var renderType: Bilibili_Community_Service_Dm_V1_RenderType = .none

  var show: Bool = false

  var bubble: Bilibili_Community_Service_Dm_V1_Bubble {
    get {return _bubble ?? Bilibili_Community_Service_Dm_V1_Bubble()}
    set {_bubble = newValue}
  }
  /// Returns true if `bubble` has been explicitly set.
  var hasBubble: Bool {return self._bubble != nil}
  /// Clears the value of `bubble`. Subsequent reads from it will return its default value.
  mutating func clearBubble() {self._bubble = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bubble: Bilibili_Community_Service_Dm_V1_Bubble? = nil
}

struct Bilibili_Community_Service_Dm_V1_ClickButtonV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portraitText: [String] = []

  var landscapeText: [String] = []

  var portraitTextFocus: [String] = []

  var landscapeTextFocus: [String] = []

  var renderType: Int32 = 0

  var textInputPost: Bool = false

  var exposureOnce: Bool = false

  var exposureType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 互动弹幕条目信息
struct Bilibili_Community_Service_Dm_V1_CommandDm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 弹幕id
  var id: Int64 = 0

  /// 对象视频cid
  var oid: Int64 = 0

  /// 发送者mid
  var mid: String = String()

  /// 互动弹幕指令
  var command: String = String()

  /// 互动弹幕正文
  var content: String = String()

  /// 出现时间
  var progress: Int32 = 0

  /// 创建时间
  var ctime: String = String()

  /// 发布时间
  var mtime: String = String()

  /// 扩展json数据
  var extra: String = String()

  /// 弹幕id str类型
  var idStr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕ai云屏蔽列表
struct Bilibili_Community_Service_Dm_V1_DanmakuAIFlag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 弹幕ai云屏蔽条目
  var dmFlags: [Bilibili_Community_Service_Dm_V1_DanmakuFlag] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕条目
struct Bilibili_Community_Service_Dm_V1_DanmakuElem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 弹幕dmid
  var id: Int64 = 0

  /// 弹幕出现位置(单位ms)
  var progress: Int32 = 0

  /// 弹幕类型 1 2 3:普通弹幕 4:底部弹幕 5:顶部弹幕 6:逆向弹幕 7:高级弹幕 8:代码弹幕 9:BAS弹幕(pool必须为2)
  var mode: Int32 = 0

  /// 弹幕字号
  var fontsize: Int32 = 0

  /// 弹幕颜色
  var color: UInt32 = 0

  /// 发送者mid hash
  var midHash: String = String()

  /// 弹幕正文
  var content: String = String()

  /// 发送时间
  var ctime: Int64 = 0

  /// 权重 用于屏蔽等级 区间:[1,10]
  var weight: Int32 = 0

  /// 动作
  var action: String = String()

  /// 弹幕池 0:普通池 1:字幕池 2:特殊池(代码/BAS弹幕)
  var pool: Int32 = 0

  /// 弹幕dmid str
  var idStr: String = String()

  /// 弹幕属性位(bin求AND)
  /// bit0:保护 bit1:直播 bit2:高赞
  var attr: Int32 = 0

  var animation: String = String()

  /// 大会员专属颜色
  var colorful: Bilibili_Community_Service_Dm_V1_DmColorfulType = .noneType

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕ai云屏蔽条目
struct Bilibili_Community_Service_Dm_V1_DanmakuFlag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 弹幕dmid
  var dmid: Int64 = 0

  /// 评分
  var flag: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 云屏蔽配置信息
struct Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 云屏蔽等级
  var recFlag: Int32 = 0

  /// 云屏蔽文案
  var recText: String = String()

  /// 云屏蔽开关
  var recSwitch: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕默认配置
struct Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否使用推荐弹幕设置
  var playerDanmakuUseDefaultConfig: Bool {
    get {return _storage._playerDanmakuUseDefaultConfig}
    set {_uniqueStorage()._playerDanmakuUseDefaultConfig = newValue}
  }

  /// 是否开启智能云屏蔽
  var playerDanmakuAiRecommendedSwitch: Bool {
    get {return _storage._playerDanmakuAiRecommendedSwitch}
    set {_uniqueStorage()._playerDanmakuAiRecommendedSwitch = newValue}
  }

  /// 智能云屏蔽等级
  var playerDanmakuAiRecommendedLevel: Int32 {
    get {return _storage._playerDanmakuAiRecommendedLevel}
    set {_uniqueStorage()._playerDanmakuAiRecommendedLevel = newValue}
  }

  /// 是否屏蔽顶端弹幕
  var playerDanmakuBlocktop: Bool {
    get {return _storage._playerDanmakuBlocktop}
    set {_uniqueStorage()._playerDanmakuBlocktop = newValue}
  }

  /// 是否屏蔽滚动弹幕
  var playerDanmakuBlockscroll: Bool {
    get {return _storage._playerDanmakuBlockscroll}
    set {_uniqueStorage()._playerDanmakuBlockscroll = newValue}
  }

  /// 是否屏蔽底端弹幕
  var playerDanmakuBlockbottom: Bool {
    get {return _storage._playerDanmakuBlockbottom}
    set {_uniqueStorage()._playerDanmakuBlockbottom = newValue}
  }

  /// 是否屏蔽彩色弹幕
  var playerDanmakuBlockcolorful: Bool {
    get {return _storage._playerDanmakuBlockcolorful}
    set {_uniqueStorage()._playerDanmakuBlockcolorful = newValue}
  }

  /// 是否屏蔽重复弹幕
  var playerDanmakuBlockrepeat: Bool {
    get {return _storage._playerDanmakuBlockrepeat}
    set {_uniqueStorage()._playerDanmakuBlockrepeat = newValue}
  }

  /// 是否屏蔽高级弹幕
  var playerDanmakuBlockspecial: Bool {
    get {return _storage._playerDanmakuBlockspecial}
    set {_uniqueStorage()._playerDanmakuBlockspecial = newValue}
  }

  /// 弹幕不透明度
  var playerDanmakuOpacity: Float {
    get {return _storage._playerDanmakuOpacity}
    set {_uniqueStorage()._playerDanmakuOpacity = newValue}
  }

  /// 弹幕缩放比例
  var playerDanmakuScalingfactor: Float {
    get {return _storage._playerDanmakuScalingfactor}
    set {_uniqueStorage()._playerDanmakuScalingfactor = newValue}
  }

  /// 弹幕显示区域
  var playerDanmakuDomain: Float {
    get {return _storage._playerDanmakuDomain}
    set {_uniqueStorage()._playerDanmakuDomain = newValue}
  }

  /// 弹幕速度
  var playerDanmakuSpeed: Int32 {
    get {return _storage._playerDanmakuSpeed}
    set {_uniqueStorage()._playerDanmakuSpeed = newValue}
  }

  /// 是否开启弹幕
  var inlinePlayerDanmakuSwitch: Bool {
    get {return _storage._inlinePlayerDanmakuSwitch}
    set {_uniqueStorage()._inlinePlayerDanmakuSwitch = newValue}
  }

  var playerDanmakuSeniorModeSwitch: Int32 {
    get {return _storage._playerDanmakuSeniorModeSwitch}
    set {_uniqueStorage()._playerDanmakuSeniorModeSwitch = newValue}
  }

  var playerDanmakuAiRecommendedLevelV2: Int32 {
    get {return _storage._playerDanmakuAiRecommendedLevelV2}
    set {_uniqueStorage()._playerDanmakuAiRecommendedLevelV2 = newValue}
  }

  var playerDanmakuAiRecommendedLevelV2Map: Dictionary<Int32,Int32> {
    get {return _storage._playerDanmakuAiRecommendedLevelV2Map}
    set {_uniqueStorage()._playerDanmakuAiRecommendedLevelV2Map = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 弹幕配置
struct Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否开启弹幕
  var playerDanmakuSwitch: Bool {
    get {return _storage._playerDanmakuSwitch}
    set {_uniqueStorage()._playerDanmakuSwitch = newValue}
  }

  /// 是否记录弹幕开关设置
  var playerDanmakuSwitchSave: Bool {
    get {return _storage._playerDanmakuSwitchSave}
    set {_uniqueStorage()._playerDanmakuSwitchSave = newValue}
  }

  /// 是否使用推荐弹幕设置
  var playerDanmakuUseDefaultConfig: Bool {
    get {return _storage._playerDanmakuUseDefaultConfig}
    set {_uniqueStorage()._playerDanmakuUseDefaultConfig = newValue}
  }

  /// 是否开启智能云屏蔽
  var playerDanmakuAiRecommendedSwitch: Bool {
    get {return _storage._playerDanmakuAiRecommendedSwitch}
    set {_uniqueStorage()._playerDanmakuAiRecommendedSwitch = newValue}
  }

  /// 智能云屏蔽等级
  var playerDanmakuAiRecommendedLevel: Int32 {
    get {return _storage._playerDanmakuAiRecommendedLevel}
    set {_uniqueStorage()._playerDanmakuAiRecommendedLevel = newValue}
  }

  /// 是否屏蔽顶端弹幕
  var playerDanmakuBlocktop: Bool {
    get {return _storage._playerDanmakuBlocktop}
    set {_uniqueStorage()._playerDanmakuBlocktop = newValue}
  }

  /// 是否屏蔽滚动弹幕
  var playerDanmakuBlockscroll: Bool {
    get {return _storage._playerDanmakuBlockscroll}
    set {_uniqueStorage()._playerDanmakuBlockscroll = newValue}
  }

  /// 是否屏蔽底端弹幕
  var playerDanmakuBlockbottom: Bool {
    get {return _storage._playerDanmakuBlockbottom}
    set {_uniqueStorage()._playerDanmakuBlockbottom = newValue}
  }

  /// 是否屏蔽彩色弹幕
  var playerDanmakuBlockcolorful: Bool {
    get {return _storage._playerDanmakuBlockcolorful}
    set {_uniqueStorage()._playerDanmakuBlockcolorful = newValue}
  }

  /// 是否屏蔽重复弹幕
  var playerDanmakuBlockrepeat: Bool {
    get {return _storage._playerDanmakuBlockrepeat}
    set {_uniqueStorage()._playerDanmakuBlockrepeat = newValue}
  }

  /// 是否屏蔽高级弹幕
  var playerDanmakuBlockspecial: Bool {
    get {return _storage._playerDanmakuBlockspecial}
    set {_uniqueStorage()._playerDanmakuBlockspecial = newValue}
  }

  /// 弹幕不透明度
  var playerDanmakuOpacity: Float {
    get {return _storage._playerDanmakuOpacity}
    set {_uniqueStorage()._playerDanmakuOpacity = newValue}
  }

  /// 弹幕缩放比例
  var playerDanmakuScalingfactor: Float {
    get {return _storage._playerDanmakuScalingfactor}
    set {_uniqueStorage()._playerDanmakuScalingfactor = newValue}
  }

  /// 弹幕显示区域
  var playerDanmakuDomain: Float {
    get {return _storage._playerDanmakuDomain}
    set {_uniqueStorage()._playerDanmakuDomain = newValue}
  }

  /// 弹幕速度
  var playerDanmakuSpeed: Int32 {
    get {return _storage._playerDanmakuSpeed}
    set {_uniqueStorage()._playerDanmakuSpeed = newValue}
  }

  /// 是否开启屏蔽列表
  var playerDanmakuEnableblocklist: Bool {
    get {return _storage._playerDanmakuEnableblocklist}
    set {_uniqueStorage()._playerDanmakuEnableblocklist = newValue}
  }

  /// 是否开启弹幕
  var inlinePlayerDanmakuSwitch: Bool {
    get {return _storage._inlinePlayerDanmakuSwitch}
    set {_uniqueStorage()._inlinePlayerDanmakuSwitch = newValue}
  }

  var inlinePlayerDanmakuConfig: Int32 {
    get {return _storage._inlinePlayerDanmakuConfig}
    set {_uniqueStorage()._inlinePlayerDanmakuConfig = newValue}
  }

  var playerDanmakuIosSwitchSave: Int32 {
    get {return _storage._playerDanmakuIosSwitchSave}
    set {_uniqueStorage()._playerDanmakuIosSwitchSave = newValue}
  }

  var playerDanmakuSeniorModeSwitch: Int32 {
    get {return _storage._playerDanmakuSeniorModeSwitch}
    set {_uniqueStorage()._playerDanmakuSeniorModeSwitch = newValue}
  }

  var playerDanmakuAiRecommendedLevelV2: Int32 {
    get {return _storage._playerDanmakuAiRecommendedLevelV2}
    set {_uniqueStorage()._playerDanmakuAiRecommendedLevelV2 = newValue}
  }

  var playerDanmakuAiRecommendedLevelV2Map: Dictionary<Int32,Int32> {
    get {return _storage._playerDanmakuAiRecommendedLevelV2Map}
    set {_uniqueStorage()._playerDanmakuAiRecommendedLevelV2Map = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var selectionText: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕显示区域自动配置
struct Bilibili_Community_Service_Dm_V1_DanmuPlayerDynamicConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 时间
  var progress: Int32 = 0

  /// 弹幕显示区域
  var playerDanmakuDomain: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕配置信息
struct Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 弹幕默认配置
  var danmukuDefaultPlayerConfig: Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig {
    get {return _danmukuDefaultPlayerConfig ?? Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig()}
    set {_danmukuDefaultPlayerConfig = newValue}
  }
  /// Returns true if `danmukuDefaultPlayerConfig` has been explicitly set.
  var hasDanmukuDefaultPlayerConfig: Bool {return self._danmukuDefaultPlayerConfig != nil}
  /// Clears the value of `danmukuDefaultPlayerConfig`. Subsequent reads from it will return its default value.
  mutating func clearDanmukuDefaultPlayerConfig() {self._danmukuDefaultPlayerConfig = nil}

  /// 弹幕用户配置
  var danmukuPlayerConfig: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig {
    get {return _danmukuPlayerConfig ?? Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig()}
    set {_danmukuPlayerConfig = newValue}
  }
  /// Returns true if `danmukuPlayerConfig` has been explicitly set.
  var hasDanmukuPlayerConfig: Bool {return self._danmukuPlayerConfig != nil}
  /// Clears the value of `danmukuPlayerConfig`. Subsequent reads from it will return its default value.
  mutating func clearDanmukuPlayerConfig() {self._danmukuPlayerConfig = nil}

  /// 弹幕显示区域自动配置列表
  var danmukuPlayerDynamicConfig: [Bilibili_Community_Service_Dm_V1_DanmuPlayerDynamicConfig] = []

  var danmukuPlayerConfigPanel: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel {
    get {return _danmukuPlayerConfigPanel ?? Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel()}
    set {_danmukuPlayerConfigPanel = newValue}
  }
  /// Returns true if `danmukuPlayerConfigPanel` has been explicitly set.
  var hasDanmukuPlayerConfigPanel: Bool {return self._danmukuPlayerConfigPanel != nil}
  /// Clears the value of `danmukuPlayerConfigPanel`. Subsequent reads from it will return its default value.
  mutating func clearDanmukuPlayerConfigPanel() {self._danmukuPlayerConfigPanel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _danmukuDefaultPlayerConfig: Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig? = nil
  fileprivate var _danmukuPlayerConfig: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig? = nil
  fileprivate var _danmukuPlayerConfigPanel: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel? = nil
}

/// web端用户弹幕配置
struct Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否开启弹幕
  var dmSwitch: Bool {
    get {return _storage._dmSwitch}
    set {_uniqueStorage()._dmSwitch = newValue}
  }

  /// 是否开启智能云屏蔽
  var aiSwitch: Bool {
    get {return _storage._aiSwitch}
    set {_uniqueStorage()._aiSwitch = newValue}
  }

  /// 智能云屏蔽等级
  var aiLevel: Int32 {
    get {return _storage._aiLevel}
    set {_uniqueStorage()._aiLevel = newValue}
  }

  /// 是否屏蔽顶端弹幕
  var blocktop: Bool {
    get {return _storage._blocktop}
    set {_uniqueStorage()._blocktop = newValue}
  }

  /// 是否屏蔽滚动弹幕
  var blockscroll: Bool {
    get {return _storage._blockscroll}
    set {_uniqueStorage()._blockscroll = newValue}
  }

  /// 是否屏蔽底端弹幕
  var blockbottom: Bool {
    get {return _storage._blockbottom}
    set {_uniqueStorage()._blockbottom = newValue}
  }

  /// 是否屏蔽彩色弹幕
  var blockcolor: Bool {
    get {return _storage._blockcolor}
    set {_uniqueStorage()._blockcolor = newValue}
  }

  /// 是否屏蔽重复弹幕
  var blockspecial: Bool {
    get {return _storage._blockspecial}
    set {_uniqueStorage()._blockspecial = newValue}
  }

  var preventshade: Bool {
    get {return _storage._preventshade}
    set {_uniqueStorage()._preventshade = newValue}
  }

  var dmask: Bool {
    get {return _storage._dmask}
    set {_uniqueStorage()._dmask = newValue}
  }

  var opacity: Float {
    get {return _storage._opacity}
    set {_uniqueStorage()._opacity = newValue}
  }

  var dmarea: Int32 {
    get {return _storage._dmarea}
    set {_uniqueStorage()._dmarea = newValue}
  }

  var speedplus: Float {
    get {return _storage._speedplus}
    set {_uniqueStorage()._speedplus = newValue}
  }

  /// 弹幕字号
  var fontsize: Float {
    get {return _storage._fontsize}
    set {_uniqueStorage()._fontsize = newValue}
  }

  var screensync: Bool {
    get {return _storage._screensync}
    set {_uniqueStorage()._screensync = newValue}
  }

  var speedsync: Bool {
    get {return _storage._speedsync}
    set {_uniqueStorage()._speedsync = newValue}
  }

  var fontfamily: String {
    get {return _storage._fontfamily}
    set {_uniqueStorage()._fontfamily = newValue}
  }

  /// 是否使用加粗
  var bold: Bool {
    get {return _storage._bold}
    set {_uniqueStorage()._bold = newValue}
  }

  var fontborder: Int32 {
    get {return _storage._fontborder}
    set {_uniqueStorage()._fontborder = newValue}
  }

  /// 弹幕渲染类型
  var drawType: String {
    get {return _storage._drawType}
    set {_uniqueStorage()._drawType = newValue}
  }

  var seniorModeSwitch: Int32 {
    get {return _storage._seniorModeSwitch}
    set {_uniqueStorage()._seniorModeSwitch = newValue}
  }

  var aiLevelV2: Int32 {
    get {return _storage._aiLevelV2}
    set {_uniqueStorage()._aiLevelV2 = newValue}
  }

  var aiLevelV2Map: Dictionary<Int32,Int32> {
    get {return _storage._aiLevelV2Map}
    set {_uniqueStorage()._aiLevelV2Map = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_Community_Service_Dm_V1_DmColorful {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 颜色类型
  var type: Bilibili_Community_Service_Dm_V1_DmColorfulType = .noneType

  var src: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_DmExpoReportReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sessionID: String = String()

  var oid: Int64 = 0

  var spmid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_DmExpoReportRes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 修改弹幕配置-请求
struct Bilibili_Community_Service_Dm_V1_DmPlayerConfigReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ts: Int64 {
    get {return _storage._ts}
    set {_uniqueStorage()._ts = newValue}
  }

  /// 是否开启弹幕
  var `switch`: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch {
    get {return _storage._switch ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch()}
    set {_uniqueStorage()._switch = newValue}
  }
  /// Returns true if ``switch`` has been explicitly set.
  var hasSwitch: Bool {return _storage._switch != nil}
  /// Clears the value of ``switch``. Subsequent reads from it will return its default value.
  mutating func clearSwitch() {_uniqueStorage()._switch = nil}

  /// 是否记录弹幕开关设置
  var switchSave: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave {
    get {return _storage._switchSave ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave()}
    set {_uniqueStorage()._switchSave = newValue}
  }
  /// Returns true if `switchSave` has been explicitly set.
  var hasSwitchSave: Bool {return _storage._switchSave != nil}
  /// Clears the value of `switchSave`. Subsequent reads from it will return its default value.
  mutating func clearSwitchSave() {_uniqueStorage()._switchSave = nil}

  /// 是否使用推荐弹幕设置
  var useDefaultConfig: Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig {
    get {return _storage._useDefaultConfig ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig()}
    set {_uniqueStorage()._useDefaultConfig = newValue}
  }
  /// Returns true if `useDefaultConfig` has been explicitly set.
  var hasUseDefaultConfig: Bool {return _storage._useDefaultConfig != nil}
  /// Clears the value of `useDefaultConfig`. Subsequent reads from it will return its default value.
  mutating func clearUseDefaultConfig() {_uniqueStorage()._useDefaultConfig = nil}

  /// 是否开启智能云屏蔽
  var aiRecommendedSwitch: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch {
    get {return _storage._aiRecommendedSwitch ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch()}
    set {_uniqueStorage()._aiRecommendedSwitch = newValue}
  }
  /// Returns true if `aiRecommendedSwitch` has been explicitly set.
  var hasAiRecommendedSwitch: Bool {return _storage._aiRecommendedSwitch != nil}
  /// Clears the value of `aiRecommendedSwitch`. Subsequent reads from it will return its default value.
  mutating func clearAiRecommendedSwitch() {_uniqueStorage()._aiRecommendedSwitch = nil}

  /// 智能云屏蔽等级
  var aiRecommendedLevel: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel {
    get {return _storage._aiRecommendedLevel ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel()}
    set {_uniqueStorage()._aiRecommendedLevel = newValue}
  }
  /// Returns true if `aiRecommendedLevel` has been explicitly set.
  var hasAiRecommendedLevel: Bool {return _storage._aiRecommendedLevel != nil}
  /// Clears the value of `aiRecommendedLevel`. Subsequent reads from it will return its default value.
  mutating func clearAiRecommendedLevel() {_uniqueStorage()._aiRecommendedLevel = nil}

  /// 是否屏蔽顶端弹幕
  var blocktop: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop {
    get {return _storage._blocktop ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop()}
    set {_uniqueStorage()._blocktop = newValue}
  }
  /// Returns true if `blocktop` has been explicitly set.
  var hasBlocktop: Bool {return _storage._blocktop != nil}
  /// Clears the value of `blocktop`. Subsequent reads from it will return its default value.
  mutating func clearBlocktop() {_uniqueStorage()._blocktop = nil}

  /// 是否屏蔽滚动弹幕
  var blockscroll: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll {
    get {return _storage._blockscroll ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll()}
    set {_uniqueStorage()._blockscroll = newValue}
  }
  /// Returns true if `blockscroll` has been explicitly set.
  var hasBlockscroll: Bool {return _storage._blockscroll != nil}
  /// Clears the value of `blockscroll`. Subsequent reads from it will return its default value.
  mutating func clearBlockscroll() {_uniqueStorage()._blockscroll = nil}

  /// 是否屏蔽底端弹幕
  var blockbottom: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom {
    get {return _storage._blockbottom ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom()}
    set {_uniqueStorage()._blockbottom = newValue}
  }
  /// Returns true if `blockbottom` has been explicitly set.
  var hasBlockbottom: Bool {return _storage._blockbottom != nil}
  /// Clears the value of `blockbottom`. Subsequent reads from it will return its default value.
  mutating func clearBlockbottom() {_uniqueStorage()._blockbottom = nil}

  /// 是否屏蔽彩色弹幕
  var blockcolorful: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful {
    get {return _storage._blockcolorful ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful()}
    set {_uniqueStorage()._blockcolorful = newValue}
  }
  /// Returns true if `blockcolorful` has been explicitly set.
  var hasBlockcolorful: Bool {return _storage._blockcolorful != nil}
  /// Clears the value of `blockcolorful`. Subsequent reads from it will return its default value.
  mutating func clearBlockcolorful() {_uniqueStorage()._blockcolorful = nil}

  /// 是否屏蔽重复弹幕
  var blockrepeat: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat {
    get {return _storage._blockrepeat ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat()}
    set {_uniqueStorage()._blockrepeat = newValue}
  }
  /// Returns true if `blockrepeat` has been explicitly set.
  var hasBlockrepeat: Bool {return _storage._blockrepeat != nil}
  /// Clears the value of `blockrepeat`. Subsequent reads from it will return its default value.
  mutating func clearBlockrepeat() {_uniqueStorage()._blockrepeat = nil}

  /// 是否屏蔽高级弹幕
  var blockspecial: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial {
    get {return _storage._blockspecial ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial()}
    set {_uniqueStorage()._blockspecial = newValue}
  }
  /// Returns true if `blockspecial` has been explicitly set.
  var hasBlockspecial: Bool {return _storage._blockspecial != nil}
  /// Clears the value of `blockspecial`. Subsequent reads from it will return its default value.
  mutating func clearBlockspecial() {_uniqueStorage()._blockspecial = nil}

  /// 弹幕不透明度
  var opacity: Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity {
    get {return _storage._opacity ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity()}
    set {_uniqueStorage()._opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return _storage._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

  /// 弹幕缩放比例
  var scalingfactor: Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor {
    get {return _storage._scalingfactor ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor()}
    set {_uniqueStorage()._scalingfactor = newValue}
  }
  /// Returns true if `scalingfactor` has been explicitly set.
  var hasScalingfactor: Bool {return _storage._scalingfactor != nil}
  /// Clears the value of `scalingfactor`. Subsequent reads from it will return its default value.
  mutating func clearScalingfactor() {_uniqueStorage()._scalingfactor = nil}

  /// 弹幕显示区域
  var domain: Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain {
    get {return _storage._domain ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain()}
    set {_uniqueStorage()._domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  var hasDomain: Bool {return _storage._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  mutating func clearDomain() {_uniqueStorage()._domain = nil}

  /// 弹幕速度
  var speed: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed {
    get {return _storage._speed ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed()}
    set {_uniqueStorage()._speed = newValue}
  }
  /// Returns true if `speed` has been explicitly set.
  var hasSpeed: Bool {return _storage._speed != nil}
  /// Clears the value of `speed`. Subsequent reads from it will return its default value.
  mutating func clearSpeed() {_uniqueStorage()._speed = nil}

  /// 是否开启屏蔽列表
  var enableblocklist: Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist {
    get {return _storage._enableblocklist ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist()}
    set {_uniqueStorage()._enableblocklist = newValue}
  }
  /// Returns true if `enableblocklist` has been explicitly set.
  var hasEnableblocklist: Bool {return _storage._enableblocklist != nil}
  /// Clears the value of `enableblocklist`. Subsequent reads from it will return its default value.
  mutating func clearEnableblocklist() {_uniqueStorage()._enableblocklist = nil}

  /// 是否开启弹幕
  var inlinePlayerDanmakuSwitch: Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch {
    get {return _storage._inlinePlayerDanmakuSwitch ?? Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch()}
    set {_uniqueStorage()._inlinePlayerDanmakuSwitch = newValue}
  }
  /// Returns true if `inlinePlayerDanmakuSwitch` has been explicitly set.
  var hasInlinePlayerDanmakuSwitch: Bool {return _storage._inlinePlayerDanmakuSwitch != nil}
  /// Clears the value of `inlinePlayerDanmakuSwitch`. Subsequent reads from it will return its default value.
  mutating func clearInlinePlayerDanmakuSwitch() {_uniqueStorage()._inlinePlayerDanmakuSwitch = nil}

  var seniorModeSwitch: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch {
    get {return _storage._seniorModeSwitch ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch()}
    set {_uniqueStorage()._seniorModeSwitch = newValue}
  }
  /// Returns true if `seniorModeSwitch` has been explicitly set.
  var hasSeniorModeSwitch: Bool {return _storage._seniorModeSwitch != nil}
  /// Clears the value of `seniorModeSwitch`. Subsequent reads from it will return its default value.
  mutating func clearSeniorModeSwitch() {_uniqueStorage()._seniorModeSwitch = nil}

  var aiRecommendedLevelV2: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2 {
    get {return _storage._aiRecommendedLevelV2 ?? Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2()}
    set {_uniqueStorage()._aiRecommendedLevelV2 = newValue}
  }
  /// Returns true if `aiRecommendedLevelV2` has been explicitly set.
  var hasAiRecommendedLevelV2: Bool {return _storage._aiRecommendedLevelV2 != nil}
  /// Clears the value of `aiRecommendedLevelV2`. Subsequent reads from it will return its default value.
  mutating func clearAiRecommendedLevelV2() {_uniqueStorage()._aiRecommendedLevelV2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_Community_Service_Dm_V1_DmSegConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pageSize: Int64 = 0

  var total: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 获取弹幕-响应
struct Bilibili_Community_Service_Dm_V1_DmSegMobileReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 弹幕列表
  var elems: [Bilibili_Community_Service_Dm_V1_DanmakuElem] = []

  /// 是否已关闭弹幕
  /// 0:未关闭 1:已关闭
  var state: Int32 = 0

  /// 弹幕云屏蔽ai评分值
  var aiFlag: Bilibili_Community_Service_Dm_V1_DanmakuAIFlag {
    get {return _aiFlag ?? Bilibili_Community_Service_Dm_V1_DanmakuAIFlag()}
    set {_aiFlag = newValue}
  }
  /// Returns true if `aiFlag` has been explicitly set.
  var hasAiFlag: Bool {return self._aiFlag != nil}
  /// Clears the value of `aiFlag`. Subsequent reads from it will return its default value.
  mutating func clearAiFlag() {self._aiFlag = nil}

  var colorfulSrc: [Bilibili_Community_Service_Dm_V1_DmColorful] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _aiFlag: Bilibili_Community_Service_Dm_V1_DanmakuAIFlag? = nil
}

/// 获取弹幕-请求
struct Bilibili_Community_Service_Dm_V1_DmSegMobileReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid/漫画epid
  var pid: Int64 = 0

  /// 视频cid/漫画cid
  var oid: Int64 = 0

  /// 弹幕类型
  /// 1:视频 2:漫画
  var type: Int32 = 0

  /// 分段(6min)
  var segmentIndex: Int64 = 0

  /// 是否青少年模式
  var teenagersMode: Int32 = 0

  var ps: Int64 = 0

  var pe: Int64 = 0

  var pullMode: Int32 = 0

  var fromScene: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ott弹幕列表-响应
struct Bilibili_Community_Service_Dm_V1_DmSegOttReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否已关闭弹幕
  /// 0:未关闭 1:已关闭
  var closed: Bool = false

  /// 弹幕列表
  var elems: [Bilibili_Community_Service_Dm_V1_DanmakuElem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ott弹幕列表-请求
struct Bilibili_Community_Service_Dm_V1_DmSegOttReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid/漫画epid
  var pid: Int64 = 0

  /// 视频cid/漫画cid
  var oid: Int64 = 0

  /// 弹幕类型
  /// 1:视频 2:漫画
  var type: Int32 = 0

  /// 分段(6min)
  var segmentIndex: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕SDK-响应
struct Bilibili_Community_Service_Dm_V1_DmSegSDKReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否已关闭弹幕
  /// 0:未关闭 1:已关闭
  var closed: Bool = false

  /// 弹幕列表
  var elems: [Bilibili_Community_Service_Dm_V1_DanmakuElem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 弹幕SDK-请求
struct Bilibili_Community_Service_Dm_V1_DmSegSDKReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid/漫画epid
  var pid: Int64 = 0

  /// 视频cid/漫画cid
  var oid: Int64 = 0

  /// 弹幕类型
  /// 1:视频 2:漫画
  var type: Int32 = 0

  /// 分段(6min)
  var segmentIndex: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 客户端弹幕元数据-响应
struct Bilibili_Community_Service_Dm_V1_DmViewReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否已关闭弹幕
  /// 0:未关闭 1:已关闭
  var closed: Bool {
    get {return _storage._closed}
    set {_uniqueStorage()._closed = newValue}
  }

  /// 智能防挡弹幕蒙版信息
  var mask: Bilibili_Community_Service_Dm_V1_VideoMask {
    get {return _storage._mask ?? Bilibili_Community_Service_Dm_V1_VideoMask()}
    set {_uniqueStorage()._mask = newValue}
  }
  /// Returns true if `mask` has been explicitly set.
  var hasMask: Bool {return _storage._mask != nil}
  /// Clears the value of `mask`. Subsequent reads from it will return its default value.
  mutating func clearMask() {_uniqueStorage()._mask = nil}

  /// 视频字幕
  var subtitle: Bilibili_Community_Service_Dm_V1_VideoSubtitle {
    get {return _storage._subtitle ?? Bilibili_Community_Service_Dm_V1_VideoSubtitle()}
    set {_uniqueStorage()._subtitle = newValue}
  }
  /// Returns true if `subtitle` has been explicitly set.
  var hasSubtitle: Bool {return _storage._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
  mutating func clearSubtitle() {_uniqueStorage()._subtitle = nil}

  /// 高级弹幕专包url(bfs)
  var specialDms: [String] {
    get {return _storage._specialDms}
    set {_uniqueStorage()._specialDms = newValue}
  }

  /// 云屏蔽配置信息
  var aiFlag: Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig {
    get {return _storage._aiFlag ?? Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig()}
    set {_uniqueStorage()._aiFlag = newValue}
  }
  /// Returns true if `aiFlag` has been explicitly set.
  var hasAiFlag: Bool {return _storage._aiFlag != nil}
  /// Clears the value of `aiFlag`. Subsequent reads from it will return its default value.
  mutating func clearAiFlag() {_uniqueStorage()._aiFlag = nil}

  /// 弹幕配置信息
  var playerConfig: Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig {
    get {return _storage._playerConfig ?? Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig()}
    set {_uniqueStorage()._playerConfig = newValue}
  }
  /// Returns true if `playerConfig` has been explicitly set.
  var hasPlayerConfig: Bool {return _storage._playerConfig != nil}
  /// Clears the value of `playerConfig`. Subsequent reads from it will return its default value.
  mutating func clearPlayerConfig() {_uniqueStorage()._playerConfig = nil}

  /// 弹幕发送框样式
  var sendBoxStyle: Int32 {
    get {return _storage._sendBoxStyle}
    set {_uniqueStorage()._sendBoxStyle = newValue}
  }

  /// 是否允许
  var allow: Bool {
    get {return _storage._allow}
    set {_uniqueStorage()._allow = newValue}
  }

  /// check box 是否展示
  var checkBox: String {
    get {return _storage._checkBox}
    set {_uniqueStorage()._checkBox = newValue}
  }

  /// check box 展示文本
  var checkBoxShowMsg: String {
    get {return _storage._checkBoxShowMsg}
    set {_uniqueStorage()._checkBoxShowMsg = newValue}
  }

  /// 展示文案
  var textPlaceholder: String {
    get {return _storage._textPlaceholder}
    set {_uniqueStorage()._textPlaceholder = newValue}
  }

  /// 弹幕输入框文案
  var inputPlaceholder: String {
    get {return _storage._inputPlaceholder}
    set {_uniqueStorage()._inputPlaceholder = newValue}
  }

  /// 用户举报弹幕 cid维度屏蔽的正则规则
  var reportFilterContent: [String] {
    get {return _storage._reportFilterContent}
    set {_uniqueStorage()._reportFilterContent = newValue}
  }

  var expoReport: Bilibili_Community_Service_Dm_V1_ExpoReport {
    get {return _storage._expoReport ?? Bilibili_Community_Service_Dm_V1_ExpoReport()}
    set {_uniqueStorage()._expoReport = newValue}
  }
  /// Returns true if `expoReport` has been explicitly set.
  var hasExpoReport: Bool {return _storage._expoReport != nil}
  /// Clears the value of `expoReport`. Subsequent reads from it will return its default value.
  mutating func clearExpoReport() {_uniqueStorage()._expoReport = nil}

  var buzzwordConfig: Bilibili_Community_Service_Dm_V1_BuzzwordConfig {
    get {return _storage._buzzwordConfig ?? Bilibili_Community_Service_Dm_V1_BuzzwordConfig()}
    set {_uniqueStorage()._buzzwordConfig = newValue}
  }
  /// Returns true if `buzzwordConfig` has been explicitly set.
  var hasBuzzwordConfig: Bool {return _storage._buzzwordConfig != nil}
  /// Clears the value of `buzzwordConfig`. Subsequent reads from it will return its default value.
  mutating func clearBuzzwordConfig() {_uniqueStorage()._buzzwordConfig = nil}

  var expressions: [Bilibili_Community_Service_Dm_V1_Expressions] {
    get {return _storage._expressions}
    set {_uniqueStorage()._expressions = newValue}
  }

  var postPanel: [Bilibili_Community_Service_Dm_V1_PostPanel] {
    get {return _storage._postPanel}
    set {_uniqueStorage()._postPanel = newValue}
  }

  var activityMeta: [String] {
    get {return _storage._activityMeta}
    set {_uniqueStorage()._activityMeta = newValue}
  }

  var postPanel2: [Bilibili_Community_Service_Dm_V1_PostPanelV2] {
    get {return _storage._postPanel2}
    set {_uniqueStorage()._postPanel2 = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 客户端弹幕元数据-请求
struct Bilibili_Community_Service_Dm_V1_DmViewReq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 稿件avid/漫画epid
  var pid: Int64 = 0

  /// 视频cid/漫画cid
  var oid: Int64 = 0

  /// 弹幕类型
  /// 1:视频 2:漫画
  var type: Int32 = 0

  /// 页面spm
  var spmid: String = String()

  /// 是否冷启
  var isHardBoot: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// web端弹幕元数据-响应
/// https://api.bilibili.com/x/v2/dm/web/view
struct Bilibili_Community_Service_Dm_V1_DmWebViewReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否已关闭弹幕
  /// 0:未关闭 1:已关闭
  var state: Int32 {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  var textSide: String {
    get {return _storage._textSide}
    set {_uniqueStorage()._textSide = newValue}
  }

  /// 分段弹幕配置
  var dmSge: Bilibili_Community_Service_Dm_V1_DmSegConfig {
    get {return _storage._dmSge ?? Bilibili_Community_Service_Dm_V1_DmSegConfig()}
    set {_uniqueStorage()._dmSge = newValue}
  }
  /// Returns true if `dmSge` has been explicitly set.
  var hasDmSge: Bool {return _storage._dmSge != nil}
  /// Clears the value of `dmSge`. Subsequent reads from it will return its default value.
  mutating func clearDmSge() {_uniqueStorage()._dmSge = nil}

  /// 云屏蔽配置信息
  var flag: Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig {
    get {return _storage._flag ?? Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig()}
    set {_uniqueStorage()._flag = newValue}
  }
  /// Returns true if `flag` has been explicitly set.
  var hasFlag: Bool {return _storage._flag != nil}
  /// Clears the value of `flag`. Subsequent reads from it will return its default value.
  mutating func clearFlag() {_uniqueStorage()._flag = nil}

  /// 高级弹幕专包url(bfs)
  var specialDms: [String] {
    get {return _storage._specialDms}
    set {_uniqueStorage()._specialDms = newValue}
  }

  /// check box 是否展示
  var checkBox: Bool {
    get {return _storage._checkBox}
    set {_uniqueStorage()._checkBox = newValue}
  }

  /// 弹幕数
  var count: Int64 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  /// 互动弹幕
  var commandDms: [Bilibili_Community_Service_Dm_V1_CommandDm] {
    get {return _storage._commandDms}
    set {_uniqueStorage()._commandDms = newValue}
  }

  /// 用户弹幕配置
  var playerConfig: Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig {
    get {return _storage._playerConfig ?? Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig()}
    set {_uniqueStorage()._playerConfig = newValue}
  }
  /// Returns true if `playerConfig` has been explicitly set.
  var hasPlayerConfig: Bool {return _storage._playerConfig != nil}
  /// Clears the value of `playerConfig`. Subsequent reads from it will return its default value.
  mutating func clearPlayerConfig() {_uniqueStorage()._playerConfig = nil}

  /// 用户举报弹幕 cid维度屏蔽
  var reportFilterContent: [String] {
    get {return _storage._reportFilterContent}
    set {_uniqueStorage()._reportFilterContent = newValue}
  }

  var expressions: [Bilibili_Community_Service_Dm_V1_Expressions] {
    get {return _storage._expressions}
    set {_uniqueStorage()._expressions = newValue}
  }

  var postPanel: [Bilibili_Community_Service_Dm_V1_PostPanel] {
    get {return _storage._postPanel}
    set {_uniqueStorage()._postPanel = newValue}
  }

  var activityMeta: [String] {
    get {return _storage._activityMeta}
    set {_uniqueStorage()._activityMeta = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_Community_Service_Dm_V1_ExpoReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shouldReportAtEnd: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Expression {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyword: [String] = []

  var url: String = String()

  var period: [Bilibili_Community_Service_Dm_V1_Period] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Expressions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [Bilibili_Community_Service_Dm_V1_Expression] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 是否开启弹幕
struct Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Label {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var content: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_LabelV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var content: [String] = []

  var exposureOnce: Bool = false

  var exposureType: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Period {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: Int64 = 0

  var end: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var canIgnore: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_PostPanel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: Int64 {
    get {return _storage._start}
    set {_uniqueStorage()._start = newValue}
  }

  var end: Int64 {
    get {return _storage._end}
    set {_uniqueStorage()._end = newValue}
  }

  var priority: Int64 {
    get {return _storage._priority}
    set {_uniqueStorage()._priority = newValue}
  }

  var bizID: Int64 {
    get {return _storage._bizID}
    set {_uniqueStorage()._bizID = newValue}
  }

  var bizType: Bilibili_Community_Service_Dm_V1_PostPanelBizType {
    get {return _storage._bizType}
    set {_uniqueStorage()._bizType = newValue}
  }

  var clickButton: Bilibili_Community_Service_Dm_V1_ClickButton {
    get {return _storage._clickButton ?? Bilibili_Community_Service_Dm_V1_ClickButton()}
    set {_uniqueStorage()._clickButton = newValue}
  }
  /// Returns true if `clickButton` has been explicitly set.
  var hasClickButton: Bool {return _storage._clickButton != nil}
  /// Clears the value of `clickButton`. Subsequent reads from it will return its default value.
  mutating func clearClickButton() {_uniqueStorage()._clickButton = nil}

  var textInput: Bilibili_Community_Service_Dm_V1_TextInput {
    get {return _storage._textInput ?? Bilibili_Community_Service_Dm_V1_TextInput()}
    set {_uniqueStorage()._textInput = newValue}
  }
  /// Returns true if `textInput` has been explicitly set.
  var hasTextInput: Bool {return _storage._textInput != nil}
  /// Clears the value of `textInput`. Subsequent reads from it will return its default value.
  mutating func clearTextInput() {_uniqueStorage()._textInput = nil}

  var checkBox: Bilibili_Community_Service_Dm_V1_CheckBox {
    get {return _storage._checkBox ?? Bilibili_Community_Service_Dm_V1_CheckBox()}
    set {_uniqueStorage()._checkBox = newValue}
  }
  /// Returns true if `checkBox` has been explicitly set.
  var hasCheckBox: Bool {return _storage._checkBox != nil}
  /// Clears the value of `checkBox`. Subsequent reads from it will return its default value.
  mutating func clearCheckBox() {_uniqueStorage()._checkBox = nil}

  var toast: Bilibili_Community_Service_Dm_V1_Toast {
    get {return _storage._toast ?? Bilibili_Community_Service_Dm_V1_Toast()}
    set {_uniqueStorage()._toast = newValue}
  }
  /// Returns true if `toast` has been explicitly set.
  var hasToast: Bool {return _storage._toast != nil}
  /// Clears the value of `toast`. Subsequent reads from it will return its default value.
  mutating func clearToast() {_uniqueStorage()._toast = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Bilibili_Community_Service_Dm_V1_PostPanelV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var start: Int64 {
    get {return _storage._start}
    set {_uniqueStorage()._start = newValue}
  }

  var end: Int64 {
    get {return _storage._end}
    set {_uniqueStorage()._end = newValue}
  }

  var bizType: Int32 {
    get {return _storage._bizType}
    set {_uniqueStorage()._bizType = newValue}
  }

  var clickButton: Bilibili_Community_Service_Dm_V1_ClickButtonV2 {
    get {return _storage._clickButton ?? Bilibili_Community_Service_Dm_V1_ClickButtonV2()}
    set {_uniqueStorage()._clickButton = newValue}
  }
  /// Returns true if `clickButton` has been explicitly set.
  var hasClickButton: Bool {return _storage._clickButton != nil}
  /// Clears the value of `clickButton`. Subsequent reads from it will return its default value.
  mutating func clearClickButton() {_uniqueStorage()._clickButton = nil}

  var textInput: Bilibili_Community_Service_Dm_V1_TextInputV2 {
    get {return _storage._textInput ?? Bilibili_Community_Service_Dm_V1_TextInputV2()}
    set {_uniqueStorage()._textInput = newValue}
  }
  /// Returns true if `textInput` has been explicitly set.
  var hasTextInput: Bool {return _storage._textInput != nil}
  /// Clears the value of `textInput`. Subsequent reads from it will return its default value.
  mutating func clearTextInput() {_uniqueStorage()._textInput = nil}

  var checkBox: Bilibili_Community_Service_Dm_V1_CheckBoxV2 {
    get {return _storage._checkBox ?? Bilibili_Community_Service_Dm_V1_CheckBoxV2()}
    set {_uniqueStorage()._checkBox = newValue}
  }
  /// Returns true if `checkBox` has been explicitly set.
  var hasCheckBox: Bool {return _storage._checkBox != nil}
  /// Clears the value of `checkBox`. Subsequent reads from it will return its default value.
  mutating func clearCheckBox() {_uniqueStorage()._checkBox = nil}

  var toast: Bilibili_Community_Service_Dm_V1_ToastV2 {
    get {return _storage._toast ?? Bilibili_Community_Service_Dm_V1_ToastV2()}
    set {_uniqueStorage()._toast = newValue}
  }
  /// Returns true if `toast` has been explicitly set.
  var hasToast: Bool {return _storage._toast != nil}
  /// Clears the value of `toast`. Subsequent reads from it will return its default value.
  mutating func clearToast() {_uniqueStorage()._toast = nil}

  var bubble: Bilibili_Community_Service_Dm_V1_BubbleV2 {
    get {return _storage._bubble ?? Bilibili_Community_Service_Dm_V1_BubbleV2()}
    set {_uniqueStorage()._bubble = newValue}
  }
  /// Returns true if `bubble` has been explicitly set.
  var hasBubble: Bool {return _storage._bubble != nil}
  /// Clears the value of `bubble`. Subsequent reads from it will return its default value.
  mutating func clearBubble() {_uniqueStorage()._bubble = nil}

  var label: Bilibili_Community_Service_Dm_V1_LabelV2 {
    get {return _storage._label ?? Bilibili_Community_Service_Dm_V1_LabelV2()}
    set {_uniqueStorage()._label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  var hasLabel: Bool {return _storage._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  mutating func clearLabel() {_uniqueStorage()._label = nil}

  var postStatus: Int32 {
    get {return _storage._postStatus}
    set {_uniqueStorage()._postStatus = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// 修改弹幕配置-响应
struct Bilibili_Community_Service_Dm_V1_Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: Int32 = 0

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 单个字幕信息
struct Bilibili_Community_Service_Dm_V1_SubtitleItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 字幕id
  var id: Int64 = 0

  /// 字幕id str
  var idStr: String = String()

  /// 字幕语言代码
  var lan: String = String()

  /// 字幕语言
  var lanDoc: String = String()

  /// 字幕文件url
  var subtitleURL: String = String()

  /// 字幕作者信息
  var author: Bilibili_Community_Service_Dm_V1_UserInfo {
    get {return _author ?? Bilibili_Community_Service_Dm_V1_UserInfo()}
    set {_author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return self._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {self._author = nil}

  /// 字幕类型
  var type: Bilibili_Community_Service_Dm_V1_SubtitleType = .cc

  var lanDocBrief: String = String()

  var aiType: Bilibili_Community_Service_Dm_V1_SubtitleAiType = .normal

  var aiStatus: Bilibili_Community_Service_Dm_V1_SubtitleAiStatus = .none

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _author: Bilibili_Community_Service_Dm_V1_UserInfo? = nil
}

struct Bilibili_Community_Service_Dm_V1_TextInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portraitPlaceholder: [String] = []

  var landscapePlaceholder: [String] = []

  var renderType: Bilibili_Community_Service_Dm_V1_RenderType = .none

  var placeholderPost: Bool = false

  var show: Bool = false

  var avatar: [Bilibili_Community_Service_Dm_V1_Avatar] = []

  var postStatus: Bilibili_Community_Service_Dm_V1_PostStatus = .normal

  var label: Bilibili_Community_Service_Dm_V1_Label {
    get {return _label ?? Bilibili_Community_Service_Dm_V1_Label()}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  mutating func clearLabel() {self._label = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _label: Bilibili_Community_Service_Dm_V1_Label? = nil
}

struct Bilibili_Community_Service_Dm_V1_TextInputV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var portraitPlaceholder: [String] = []

  var landscapePlaceholder: [String] = []

  var renderType: Bilibili_Community_Service_Dm_V1_RenderType = .none

  var placeholderPost: Bool = false

  var avatar: [Bilibili_Community_Service_Dm_V1_Avatar] = []

  var textInputLimit: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_Toast {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var duration: Int32 = 0

  var show: Bool = false

  var button: Bilibili_Community_Service_Dm_V1_Button {
    get {return _button ?? Bilibili_Community_Service_Dm_V1_Button()}
    set {_button = newValue}
  }
  /// Returns true if `button` has been explicitly set.
  var hasButton: Bool {return self._button != nil}
  /// Clears the value of `button`. Subsequent reads from it will return its default value.
  mutating func clearButton() {self._button = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _button: Bilibili_Community_Service_Dm_V1_Button? = nil
}

struct Bilibili_Community_Service_Dm_V1_ToastButtonV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var action: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bilibili_Community_Service_Dm_V1_ToastV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String = String()

  var duration: Int32 = 0

  var toastButtonV2: Bilibili_Community_Service_Dm_V1_ToastButtonV2 {
    get {return _toastButtonV2 ?? Bilibili_Community_Service_Dm_V1_ToastButtonV2()}
    set {_toastButtonV2 = newValue}
  }
  /// Returns true if `toastButtonV2` has been explicitly set.
  var hasToastButtonV2: Bool {return self._toastButtonV2 != nil}
  /// Clears the value of `toastButtonV2`. Subsequent reads from it will return its default value.
  mutating func clearToastButtonV2() {self._toastButtonV2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _toastButtonV2: Bilibili_Community_Service_Dm_V1_ToastButtonV2? = nil
}

/// 字幕作者信息
struct Bilibili_Community_Service_Dm_V1_UserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 用户mid
  var mid: Int64 = 0

  /// 用户昵称
  var name: String = String()

  /// 用户性别
  var sex: String = String()

  /// 用户头像url
  var face: String = String()

  /// 用户签名
  var sign: String = String()

  /// 用户等级
  var rank: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 智能防挡弹幕蒙版信息
struct Bilibili_Community_Service_Dm_V1_VideoMask {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 视频cid
  var cid: Int64 = 0

  /// 平台
  /// 0:web端 1:客户端
  var plat: Int32 = 0

  /// 帧率
  var fps: Int32 = 0

  /// 间隔时间
  var time: Int64 = 0

  /// 蒙版url
  var maskURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 视频字幕信息
struct Bilibili_Community_Service_Dm_V1_VideoSubtitle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 视频原语言代码
  var lan: String = String()

  /// 视频原语言
  var lanDoc: String = String()

  /// 视频字幕列表
  var subtitles: [Bilibili_Community_Service_Dm_V1_SubtitleItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Bilibili_Community_Service_Dm_V1_AvatarType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_BubbleType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_CheckboxType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DMAttrBit: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmColorfulType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ExposureType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PostPanelBizType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PostStatus: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_RenderType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_SubtitleAiStatus: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_SubtitleAiType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_SubtitleType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ToastFunctionType: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Avatar: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Bubble: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_BubbleV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Button: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_BuzzwordConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_BuzzwordShowConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_CheckBox: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_CheckBoxV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ClickButton: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ClickButtonV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_CommandDm: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmakuAIFlag: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmakuElem: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmakuFlag: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmuPlayerDynamicConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmColorful: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmExpoReportReq: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmExpoReportRes: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmPlayerConfigReq: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegMobileReply: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegMobileReq: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegOttReply: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegOttReq: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegSDKReply: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmSegSDKReq: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmViewReply: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmViewReq: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_DmWebViewReply: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ExpoReport: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Expression: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Expressions: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Label: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_LabelV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Period: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PostPanel: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_PostPanelV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Response: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_SubtitleItem: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_TextInput: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_TextInputV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_Toast: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ToastButtonV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_ToastV2: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_UserInfo: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_VideoMask: @unchecked Sendable {}
extension Bilibili_Community_Service_Dm_V1_VideoSubtitle: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bilibili.community.service.dm.v1"

extension Bilibili_Community_Service_Dm_V1_AvatarType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AvatarTypeNone"),
    1: .same(proto: "AvatarTypeNFT"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_BubbleType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BubbleTypeNone"),
    1: .same(proto: "BubbleTypeClickButton"),
    2: .same(proto: "BubbleTypeDmSettingPanel"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_CheckboxType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CheckboxTypeNone"),
    1: .same(proto: "CheckboxTypeEncourage"),
    2: .same(proto: "CheckboxTypeColorDM"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_DMAttrBit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DMAttrBitProtect"),
    1: .same(proto: "DMAttrBitFromLive"),
    2: .same(proto: "DMAttrHighLike"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_DmColorfulType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NoneType"),
    60001: .same(proto: "VipGradualColor"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_ExposureType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ExposureTypeNone"),
    1: .same(proto: "ExposureTypeDMSend"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_PostPanelBizType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PostPanelBizTypeNone"),
    1: .same(proto: "PostPanelBizTypeEncourage"),
    2: .same(proto: "PostPanelBizTypeColorDM"),
    3: .same(proto: "PostPanelBizTypeNFTDM"),
    4: .same(proto: "PostPanelBizTypeFragClose"),
    5: .same(proto: "PostPanelBizTypeRecommend"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_PostStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PostStatusNormal"),
    1: .same(proto: "PostStatusClosed"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_RenderType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RenderTypeNone"),
    1: .same(proto: "RenderTypeSingle"),
    2: .same(proto: "RenderTypeRotation"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_SubtitleAiStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "None"),
    1: .same(proto: "Exposure"),
    2: .same(proto: "Assist"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_SubtitleAiType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Normal"),
    1: .same(proto: "Translate"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_SubtitleType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CC"),
    1: .same(proto: "AI"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_ToastFunctionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ToastFunctionTypeNone"),
    1: .same(proto: "ToastFunctionTypePostPanel"),
  ]
}

extension Bilibili_Community_Service_Dm_V1_Avatar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Avatar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "url"),
    3: .standard(proto: "avatar_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.avatarType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if self.avatarType != .none {
      try visitor.visitSingularEnumField(value: self.avatarType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Avatar, rhs: Bilibili_Community_Service_Dm_V1_Avatar) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.url != rhs.url {return false}
    if lhs.avatarType != rhs.avatarType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Bubble: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Bubble"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Bubble, rhs: Bilibili_Community_Service_Dm_V1_Bubble) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_BubbleV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BubbleV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "url"),
    3: .standard(proto: "bubble_type"),
    4: .standard(proto: "exposure_once"),
    5: .standard(proto: "exposure_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.bubbleType) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.exposureOnce) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.exposureType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if self.bubbleType != .none {
      try visitor.visitSingularEnumField(value: self.bubbleType, fieldNumber: 3)
    }
    if self.exposureOnce != false {
      try visitor.visitSingularBoolField(value: self.exposureOnce, fieldNumber: 4)
    }
    if self.exposureType != .none {
      try visitor.visitSingularEnumField(value: self.exposureType, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_BubbleV2, rhs: Bilibili_Community_Service_Dm_V1_BubbleV2) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.url != rhs.url {return false}
    if lhs.bubbleType != rhs.bubbleType {return false}
    if lhs.exposureOnce != rhs.exposureOnce {return false}
    if lhs.exposureType != rhs.exposureType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Button: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Button"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "action"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.action) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.action != 0 {
      try visitor.visitSingularInt32Field(value: self.action, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Button, rhs: Bilibili_Community_Service_Dm_V1_Button) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_BuzzwordConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuzzwordConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keywords"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.keywords) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keywords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keywords, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_BuzzwordConfig, rhs: Bilibili_Community_Service_Dm_V1_BuzzwordConfig) -> Bool {
    if lhs.keywords != rhs.keywords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_BuzzwordShowConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuzzwordShowConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "schema"),
    3: .same(proto: "source"),
    4: .same(proto: "id"),
    5: .standard(proto: "buzzword_id"),
    6: .standard(proto: "schema_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.schema) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.source) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.buzzwordID) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.schemaType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.schema.isEmpty {
      try visitor.visitSingularStringField(value: self.schema, fieldNumber: 2)
    }
    if self.source != 0 {
      try visitor.visitSingularInt32Field(value: self.source, fieldNumber: 3)
    }
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 4)
    }
    if self.buzzwordID != 0 {
      try visitor.visitSingularInt64Field(value: self.buzzwordID, fieldNumber: 5)
    }
    if self.schemaType != 0 {
      try visitor.visitSingularInt32Field(value: self.schemaType, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_BuzzwordShowConfig, rhs: Bilibili_Community_Service_Dm_V1_BuzzwordShowConfig) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.schema != rhs.schema {return false}
    if lhs.source != rhs.source {return false}
    if lhs.id != rhs.id {return false}
    if lhs.buzzwordID != rhs.buzzwordID {return false}
    if lhs.schemaType != rhs.schemaType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_CheckBox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckBox"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "type"),
    3: .standard(proto: "default_value"),
    4: .same(proto: "show"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.defaultValue) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.show) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.type != .none {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.defaultValue != false {
      try visitor.visitSingularBoolField(value: self.defaultValue, fieldNumber: 3)
    }
    if self.show != false {
      try visitor.visitSingularBoolField(value: self.show, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_CheckBox, rhs: Bilibili_Community_Service_Dm_V1_CheckBox) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.type != rhs.type {return false}
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.show != rhs.show {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_CheckBoxV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CheckBoxV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "type"),
    3: .standard(proto: "default_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.defaultValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 2)
    }
    if self.defaultValue != false {
      try visitor.visitSingularBoolField(value: self.defaultValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_CheckBoxV2, rhs: Bilibili_Community_Service_Dm_V1_CheckBoxV2) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.type != rhs.type {return false}
    if lhs.defaultValue != rhs.defaultValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_ClickButton: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClickButton"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "portrait_text"),
    2: .standard(proto: "landscape_text"),
    3: .standard(proto: "portrait_text_focus"),
    4: .standard(proto: "landscape_text_focus"),
    5: .standard(proto: "render_type"),
    6: .same(proto: "show"),
    7: .same(proto: "bubble"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.portraitText) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.landscapeText) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.portraitTextFocus) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.landscapeTextFocus) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.show) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._bubble) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.portraitText.isEmpty {
      try visitor.visitRepeatedStringField(value: self.portraitText, fieldNumber: 1)
    }
    if !self.landscapeText.isEmpty {
      try visitor.visitRepeatedStringField(value: self.landscapeText, fieldNumber: 2)
    }
    if !self.portraitTextFocus.isEmpty {
      try visitor.visitRepeatedStringField(value: self.portraitTextFocus, fieldNumber: 3)
    }
    if !self.landscapeTextFocus.isEmpty {
      try visitor.visitRepeatedStringField(value: self.landscapeTextFocus, fieldNumber: 4)
    }
    if self.renderType != .none {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 5)
    }
    if self.show != false {
      try visitor.visitSingularBoolField(value: self.show, fieldNumber: 6)
    }
    try { if let v = self._bubble {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_ClickButton, rhs: Bilibili_Community_Service_Dm_V1_ClickButton) -> Bool {
    if lhs.portraitText != rhs.portraitText {return false}
    if lhs.landscapeText != rhs.landscapeText {return false}
    if lhs.portraitTextFocus != rhs.portraitTextFocus {return false}
    if lhs.landscapeTextFocus != rhs.landscapeTextFocus {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.show != rhs.show {return false}
    if lhs._bubble != rhs._bubble {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_ClickButtonV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClickButtonV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "portrait_text"),
    2: .standard(proto: "landscape_text"),
    3: .standard(proto: "portrait_text_focus"),
    4: .standard(proto: "landscape_text_focus"),
    5: .standard(proto: "render_type"),
    6: .standard(proto: "text_input_post"),
    7: .standard(proto: "exposure_once"),
    8: .standard(proto: "exposure_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.portraitText) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.landscapeText) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.portraitTextFocus) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.landscapeTextFocus) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.renderType) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.textInputPost) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.exposureOnce) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.exposureType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portraitText.isEmpty {
      try visitor.visitRepeatedStringField(value: self.portraitText, fieldNumber: 1)
    }
    if !self.landscapeText.isEmpty {
      try visitor.visitRepeatedStringField(value: self.landscapeText, fieldNumber: 2)
    }
    if !self.portraitTextFocus.isEmpty {
      try visitor.visitRepeatedStringField(value: self.portraitTextFocus, fieldNumber: 3)
    }
    if !self.landscapeTextFocus.isEmpty {
      try visitor.visitRepeatedStringField(value: self.landscapeTextFocus, fieldNumber: 4)
    }
    if self.renderType != 0 {
      try visitor.visitSingularInt32Field(value: self.renderType, fieldNumber: 5)
    }
    if self.textInputPost != false {
      try visitor.visitSingularBoolField(value: self.textInputPost, fieldNumber: 6)
    }
    if self.exposureOnce != false {
      try visitor.visitSingularBoolField(value: self.exposureOnce, fieldNumber: 7)
    }
    if self.exposureType != 0 {
      try visitor.visitSingularInt32Field(value: self.exposureType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_ClickButtonV2, rhs: Bilibili_Community_Service_Dm_V1_ClickButtonV2) -> Bool {
    if lhs.portraitText != rhs.portraitText {return false}
    if lhs.landscapeText != rhs.landscapeText {return false}
    if lhs.portraitTextFocus != rhs.portraitTextFocus {return false}
    if lhs.landscapeTextFocus != rhs.landscapeTextFocus {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.textInputPost != rhs.textInputPost {return false}
    if lhs.exposureOnce != rhs.exposureOnce {return false}
    if lhs.exposureType != rhs.exposureType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_CommandDm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandDm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "oid"),
    3: .same(proto: "mid"),
    4: .same(proto: "command"),
    5: .same(proto: "content"),
    6: .same(proto: "progress"),
    7: .same(proto: "ctime"),
    8: .same(proto: "mtime"),
    9: .same(proto: "extra"),
    10: .same(proto: "idStr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.command) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.progress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.ctime) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.mtime) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.extra) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.idStr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 2)
    }
    if !self.mid.isEmpty {
      try visitor.visitSingularStringField(value: self.mid, fieldNumber: 3)
    }
    if !self.command.isEmpty {
      try visitor.visitSingularStringField(value: self.command, fieldNumber: 4)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 5)
    }
    if self.progress != 0 {
      try visitor.visitSingularInt32Field(value: self.progress, fieldNumber: 6)
    }
    if !self.ctime.isEmpty {
      try visitor.visitSingularStringField(value: self.ctime, fieldNumber: 7)
    }
    if !self.mtime.isEmpty {
      try visitor.visitSingularStringField(value: self.mtime, fieldNumber: 8)
    }
    if !self.extra.isEmpty {
      try visitor.visitSingularStringField(value: self.extra, fieldNumber: 9)
    }
    if !self.idStr.isEmpty {
      try visitor.visitSingularStringField(value: self.idStr, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_CommandDm, rhs: Bilibili_Community_Service_Dm_V1_CommandDm) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.mid != rhs.mid {return false}
    if lhs.command != rhs.command {return false}
    if lhs.content != rhs.content {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.mtime != rhs.mtime {return false}
    if lhs.extra != rhs.extra {return false}
    if lhs.idStr != rhs.idStr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmakuAIFlag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmakuAIFlag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dm_flags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.dmFlags) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.dmFlags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dmFlags, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmakuAIFlag, rhs: Bilibili_Community_Service_Dm_V1_DanmakuAIFlag) -> Bool {
    if lhs.dmFlags != rhs.dmFlags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmakuElem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmakuElem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "progress"),
    3: .same(proto: "mode"),
    4: .same(proto: "fontsize"),
    5: .same(proto: "color"),
    6: .same(proto: "midHash"),
    7: .same(proto: "content"),
    8: .same(proto: "ctime"),
    9: .same(proto: "weight"),
    10: .same(proto: "action"),
    11: .same(proto: "pool"),
    12: .same(proto: "idStr"),
    13: .same(proto: "attr"),
    22: .same(proto: "animation"),
    24: .same(proto: "colorful"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.progress) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.mode) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.fontsize) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.color) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.midHash) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.ctime) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.weight) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.action) }()
      case 11: try { try decoder.decodeSingularInt32Field(value: &self.pool) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.idStr) }()
      case 13: try { try decoder.decodeSingularInt32Field(value: &self.attr) }()
      case 22: try { try decoder.decodeSingularStringField(value: &self.animation) }()
      case 24: try { try decoder.decodeSingularEnumField(value: &self.colorful) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.progress != 0 {
      try visitor.visitSingularInt32Field(value: self.progress, fieldNumber: 2)
    }
    if self.mode != 0 {
      try visitor.visitSingularInt32Field(value: self.mode, fieldNumber: 3)
    }
    if self.fontsize != 0 {
      try visitor.visitSingularInt32Field(value: self.fontsize, fieldNumber: 4)
    }
    if self.color != 0 {
      try visitor.visitSingularUInt32Field(value: self.color, fieldNumber: 5)
    }
    if !self.midHash.isEmpty {
      try visitor.visitSingularStringField(value: self.midHash, fieldNumber: 6)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    if self.ctime != 0 {
      try visitor.visitSingularInt64Field(value: self.ctime, fieldNumber: 8)
    }
    if self.weight != 0 {
      try visitor.visitSingularInt32Field(value: self.weight, fieldNumber: 9)
    }
    if !self.action.isEmpty {
      try visitor.visitSingularStringField(value: self.action, fieldNumber: 10)
    }
    if self.pool != 0 {
      try visitor.visitSingularInt32Field(value: self.pool, fieldNumber: 11)
    }
    if !self.idStr.isEmpty {
      try visitor.visitSingularStringField(value: self.idStr, fieldNumber: 12)
    }
    if self.attr != 0 {
      try visitor.visitSingularInt32Field(value: self.attr, fieldNumber: 13)
    }
    if !self.animation.isEmpty {
      try visitor.visitSingularStringField(value: self.animation, fieldNumber: 22)
    }
    if self.colorful != .noneType {
      try visitor.visitSingularEnumField(value: self.colorful, fieldNumber: 24)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmakuElem, rhs: Bilibili_Community_Service_Dm_V1_DanmakuElem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.fontsize != rhs.fontsize {return false}
    if lhs.color != rhs.color {return false}
    if lhs.midHash != rhs.midHash {return false}
    if lhs.content != rhs.content {return false}
    if lhs.ctime != rhs.ctime {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.action != rhs.action {return false}
    if lhs.pool != rhs.pool {return false}
    if lhs.idStr != rhs.idStr {return false}
    if lhs.attr != rhs.attr {return false}
    if lhs.animation != rhs.animation {return false}
    if lhs.colorful != rhs.colorful {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmakuFlag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmakuFlag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dmid"),
    2: .same(proto: "flag"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.dmid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.flag) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dmid != 0 {
      try visitor.visitSingularInt64Field(value: self.dmid, fieldNumber: 1)
    }
    if self.flag != 0 {
      try visitor.visitSingularUInt32Field(value: self.flag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmakuFlag, rhs: Bilibili_Community_Service_Dm_V1_DanmakuFlag) -> Bool {
    if lhs.dmid != rhs.dmid {return false}
    if lhs.flag != rhs.flag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmakuFlagConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rec_flag"),
    2: .standard(proto: "rec_text"),
    3: .standard(proto: "rec_switch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.recFlag) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recText) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.recSwitch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.recFlag != 0 {
      try visitor.visitSingularInt32Field(value: self.recFlag, fieldNumber: 1)
    }
    if !self.recText.isEmpty {
      try visitor.visitSingularStringField(value: self.recText, fieldNumber: 2)
    }
    if self.recSwitch != 0 {
      try visitor.visitSingularInt32Field(value: self.recSwitch, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig, rhs: Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig) -> Bool {
    if lhs.recFlag != rhs.recFlag {return false}
    if lhs.recText != rhs.recText {return false}
    if lhs.recSwitch != rhs.recSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmuDefaultPlayerConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_danmaku_use_default_config"),
    4: .standard(proto: "player_danmaku_ai_recommended_switch"),
    5: .standard(proto: "player_danmaku_ai_recommended_level"),
    6: .standard(proto: "player_danmaku_blocktop"),
    7: .standard(proto: "player_danmaku_blockscroll"),
    8: .standard(proto: "player_danmaku_blockbottom"),
    9: .standard(proto: "player_danmaku_blockcolorful"),
    10: .standard(proto: "player_danmaku_blockrepeat"),
    11: .standard(proto: "player_danmaku_blockspecial"),
    12: .standard(proto: "player_danmaku_opacity"),
    13: .standard(proto: "player_danmaku_scalingfactor"),
    14: .standard(proto: "player_danmaku_domain"),
    15: .standard(proto: "player_danmaku_speed"),
    16: .standard(proto: "inline_player_danmaku_switch"),
    17: .standard(proto: "player_danmaku_senior_mode_switch"),
    18: .standard(proto: "player_danmaku_ai_recommended_level_v2"),
    19: .standard(proto: "player_danmaku_ai_recommended_level_v2_map"),
  ]

  fileprivate class _StorageClass {
    var _playerDanmakuUseDefaultConfig: Bool = false
    var _playerDanmakuAiRecommendedSwitch: Bool = false
    var _playerDanmakuAiRecommendedLevel: Int32 = 0
    var _playerDanmakuBlocktop: Bool = false
    var _playerDanmakuBlockscroll: Bool = false
    var _playerDanmakuBlockbottom: Bool = false
    var _playerDanmakuBlockcolorful: Bool = false
    var _playerDanmakuBlockrepeat: Bool = false
    var _playerDanmakuBlockspecial: Bool = false
    var _playerDanmakuOpacity: Float = 0
    var _playerDanmakuScalingfactor: Float = 0
    var _playerDanmakuDomain: Float = 0
    var _playerDanmakuSpeed: Int32 = 0
    var _inlinePlayerDanmakuSwitch: Bool = false
    var _playerDanmakuSeniorModeSwitch: Int32 = 0
    var _playerDanmakuAiRecommendedLevelV2: Int32 = 0
    var _playerDanmakuAiRecommendedLevelV2Map: Dictionary<Int32,Int32> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _playerDanmakuUseDefaultConfig = source._playerDanmakuUseDefaultConfig
      _playerDanmakuAiRecommendedSwitch = source._playerDanmakuAiRecommendedSwitch
      _playerDanmakuAiRecommendedLevel = source._playerDanmakuAiRecommendedLevel
      _playerDanmakuBlocktop = source._playerDanmakuBlocktop
      _playerDanmakuBlockscroll = source._playerDanmakuBlockscroll
      _playerDanmakuBlockbottom = source._playerDanmakuBlockbottom
      _playerDanmakuBlockcolorful = source._playerDanmakuBlockcolorful
      _playerDanmakuBlockrepeat = source._playerDanmakuBlockrepeat
      _playerDanmakuBlockspecial = source._playerDanmakuBlockspecial
      _playerDanmakuOpacity = source._playerDanmakuOpacity
      _playerDanmakuScalingfactor = source._playerDanmakuScalingfactor
      _playerDanmakuDomain = source._playerDanmakuDomain
      _playerDanmakuSpeed = source._playerDanmakuSpeed
      _inlinePlayerDanmakuSwitch = source._inlinePlayerDanmakuSwitch
      _playerDanmakuSeniorModeSwitch = source._playerDanmakuSeniorModeSwitch
      _playerDanmakuAiRecommendedLevelV2 = source._playerDanmakuAiRecommendedLevelV2
      _playerDanmakuAiRecommendedLevelV2Map = source._playerDanmakuAiRecommendedLevelV2Map
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuUseDefaultConfig) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuAiRecommendedSwitch) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuAiRecommendedLevel) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlocktop) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockscroll) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockbottom) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockcolorful) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockrepeat) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockspecial) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._playerDanmakuOpacity) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._playerDanmakuScalingfactor) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._playerDanmakuDomain) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuSpeed) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._inlinePlayerDanmakuSwitch) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuSeniorModeSwitch) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuAiRecommendedLevelV2) }()
        case 19: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._playerDanmakuAiRecommendedLevelV2Map) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._playerDanmakuUseDefaultConfig != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuUseDefaultConfig, fieldNumber: 1)
      }
      if _storage._playerDanmakuAiRecommendedSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuAiRecommendedSwitch, fieldNumber: 4)
      }
      if _storage._playerDanmakuAiRecommendedLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuAiRecommendedLevel, fieldNumber: 5)
      }
      if _storage._playerDanmakuBlocktop != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlocktop, fieldNumber: 6)
      }
      if _storage._playerDanmakuBlockscroll != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockscroll, fieldNumber: 7)
      }
      if _storage._playerDanmakuBlockbottom != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockbottom, fieldNumber: 8)
      }
      if _storage._playerDanmakuBlockcolorful != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockcolorful, fieldNumber: 9)
      }
      if _storage._playerDanmakuBlockrepeat != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockrepeat, fieldNumber: 10)
      }
      if _storage._playerDanmakuBlockspecial != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockspecial, fieldNumber: 11)
      }
      if _storage._playerDanmakuOpacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._playerDanmakuOpacity, fieldNumber: 12)
      }
      if _storage._playerDanmakuScalingfactor != 0 {
        try visitor.visitSingularFloatField(value: _storage._playerDanmakuScalingfactor, fieldNumber: 13)
      }
      if _storage._playerDanmakuDomain != 0 {
        try visitor.visitSingularFloatField(value: _storage._playerDanmakuDomain, fieldNumber: 14)
      }
      if _storage._playerDanmakuSpeed != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuSpeed, fieldNumber: 15)
      }
      if _storage._inlinePlayerDanmakuSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._inlinePlayerDanmakuSwitch, fieldNumber: 16)
      }
      if _storage._playerDanmakuSeniorModeSwitch != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuSeniorModeSwitch, fieldNumber: 17)
      }
      if _storage._playerDanmakuAiRecommendedLevelV2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuAiRecommendedLevelV2, fieldNumber: 18)
      }
      if !_storage._playerDanmakuAiRecommendedLevelV2Map.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._playerDanmakuAiRecommendedLevelV2Map, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig, rhs: Bilibili_Community_Service_Dm_V1_DanmuDefaultPlayerConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._playerDanmakuUseDefaultConfig != rhs_storage._playerDanmakuUseDefaultConfig {return false}
        if _storage._playerDanmakuAiRecommendedSwitch != rhs_storage._playerDanmakuAiRecommendedSwitch {return false}
        if _storage._playerDanmakuAiRecommendedLevel != rhs_storage._playerDanmakuAiRecommendedLevel {return false}
        if _storage._playerDanmakuBlocktop != rhs_storage._playerDanmakuBlocktop {return false}
        if _storage._playerDanmakuBlockscroll != rhs_storage._playerDanmakuBlockscroll {return false}
        if _storage._playerDanmakuBlockbottom != rhs_storage._playerDanmakuBlockbottom {return false}
        if _storage._playerDanmakuBlockcolorful != rhs_storage._playerDanmakuBlockcolorful {return false}
        if _storage._playerDanmakuBlockrepeat != rhs_storage._playerDanmakuBlockrepeat {return false}
        if _storage._playerDanmakuBlockspecial != rhs_storage._playerDanmakuBlockspecial {return false}
        if _storage._playerDanmakuOpacity != rhs_storage._playerDanmakuOpacity {return false}
        if _storage._playerDanmakuScalingfactor != rhs_storage._playerDanmakuScalingfactor {return false}
        if _storage._playerDanmakuDomain != rhs_storage._playerDanmakuDomain {return false}
        if _storage._playerDanmakuSpeed != rhs_storage._playerDanmakuSpeed {return false}
        if _storage._inlinePlayerDanmakuSwitch != rhs_storage._inlinePlayerDanmakuSwitch {return false}
        if _storage._playerDanmakuSeniorModeSwitch != rhs_storage._playerDanmakuSeniorModeSwitch {return false}
        if _storage._playerDanmakuAiRecommendedLevelV2 != rhs_storage._playerDanmakuAiRecommendedLevelV2 {return false}
        if _storage._playerDanmakuAiRecommendedLevelV2Map != rhs_storage._playerDanmakuAiRecommendedLevelV2Map {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmuPlayerConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "player_danmaku_switch"),
    2: .standard(proto: "player_danmaku_switch_save"),
    3: .standard(proto: "player_danmaku_use_default_config"),
    4: .standard(proto: "player_danmaku_ai_recommended_switch"),
    5: .standard(proto: "player_danmaku_ai_recommended_level"),
    6: .standard(proto: "player_danmaku_blocktop"),
    7: .standard(proto: "player_danmaku_blockscroll"),
    8: .standard(proto: "player_danmaku_blockbottom"),
    9: .standard(proto: "player_danmaku_blockcolorful"),
    10: .standard(proto: "player_danmaku_blockrepeat"),
    11: .standard(proto: "player_danmaku_blockspecial"),
    12: .standard(proto: "player_danmaku_opacity"),
    13: .standard(proto: "player_danmaku_scalingfactor"),
    14: .standard(proto: "player_danmaku_domain"),
    15: .standard(proto: "player_danmaku_speed"),
    16: .standard(proto: "player_danmaku_enableblocklist"),
    17: .standard(proto: "inline_player_danmaku_switch"),
    18: .standard(proto: "inline_player_danmaku_config"),
    19: .standard(proto: "player_danmaku_ios_switch_save"),
    20: .standard(proto: "player_danmaku_senior_mode_switch"),
    21: .standard(proto: "player_danmaku_ai_recommended_level_v2"),
    22: .standard(proto: "player_danmaku_ai_recommended_level_v2_map"),
  ]

  fileprivate class _StorageClass {
    var _playerDanmakuSwitch: Bool = false
    var _playerDanmakuSwitchSave: Bool = false
    var _playerDanmakuUseDefaultConfig: Bool = false
    var _playerDanmakuAiRecommendedSwitch: Bool = false
    var _playerDanmakuAiRecommendedLevel: Int32 = 0
    var _playerDanmakuBlocktop: Bool = false
    var _playerDanmakuBlockscroll: Bool = false
    var _playerDanmakuBlockbottom: Bool = false
    var _playerDanmakuBlockcolorful: Bool = false
    var _playerDanmakuBlockrepeat: Bool = false
    var _playerDanmakuBlockspecial: Bool = false
    var _playerDanmakuOpacity: Float = 0
    var _playerDanmakuScalingfactor: Float = 0
    var _playerDanmakuDomain: Float = 0
    var _playerDanmakuSpeed: Int32 = 0
    var _playerDanmakuEnableblocklist: Bool = false
    var _inlinePlayerDanmakuSwitch: Bool = false
    var _inlinePlayerDanmakuConfig: Int32 = 0
    var _playerDanmakuIosSwitchSave: Int32 = 0
    var _playerDanmakuSeniorModeSwitch: Int32 = 0
    var _playerDanmakuAiRecommendedLevelV2: Int32 = 0
    var _playerDanmakuAiRecommendedLevelV2Map: Dictionary<Int32,Int32> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _playerDanmakuSwitch = source._playerDanmakuSwitch
      _playerDanmakuSwitchSave = source._playerDanmakuSwitchSave
      _playerDanmakuUseDefaultConfig = source._playerDanmakuUseDefaultConfig
      _playerDanmakuAiRecommendedSwitch = source._playerDanmakuAiRecommendedSwitch
      _playerDanmakuAiRecommendedLevel = source._playerDanmakuAiRecommendedLevel
      _playerDanmakuBlocktop = source._playerDanmakuBlocktop
      _playerDanmakuBlockscroll = source._playerDanmakuBlockscroll
      _playerDanmakuBlockbottom = source._playerDanmakuBlockbottom
      _playerDanmakuBlockcolorful = source._playerDanmakuBlockcolorful
      _playerDanmakuBlockrepeat = source._playerDanmakuBlockrepeat
      _playerDanmakuBlockspecial = source._playerDanmakuBlockspecial
      _playerDanmakuOpacity = source._playerDanmakuOpacity
      _playerDanmakuScalingfactor = source._playerDanmakuScalingfactor
      _playerDanmakuDomain = source._playerDanmakuDomain
      _playerDanmakuSpeed = source._playerDanmakuSpeed
      _playerDanmakuEnableblocklist = source._playerDanmakuEnableblocklist
      _inlinePlayerDanmakuSwitch = source._inlinePlayerDanmakuSwitch
      _inlinePlayerDanmakuConfig = source._inlinePlayerDanmakuConfig
      _playerDanmakuIosSwitchSave = source._playerDanmakuIosSwitchSave
      _playerDanmakuSeniorModeSwitch = source._playerDanmakuSeniorModeSwitch
      _playerDanmakuAiRecommendedLevelV2 = source._playerDanmakuAiRecommendedLevelV2
      _playerDanmakuAiRecommendedLevelV2Map = source._playerDanmakuAiRecommendedLevelV2Map
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuSwitch) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuSwitchSave) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuUseDefaultConfig) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuAiRecommendedSwitch) }()
        case 5: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuAiRecommendedLevel) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlocktop) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockscroll) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockbottom) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockcolorful) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockrepeat) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuBlockspecial) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._playerDanmakuOpacity) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._playerDanmakuScalingfactor) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._playerDanmakuDomain) }()
        case 15: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuSpeed) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._playerDanmakuEnableblocklist) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._inlinePlayerDanmakuSwitch) }()
        case 18: try { try decoder.decodeSingularInt32Field(value: &_storage._inlinePlayerDanmakuConfig) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuIosSwitchSave) }()
        case 20: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuSeniorModeSwitch) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._playerDanmakuAiRecommendedLevelV2) }()
        case 22: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._playerDanmakuAiRecommendedLevelV2Map) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._playerDanmakuSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuSwitch, fieldNumber: 1)
      }
      if _storage._playerDanmakuSwitchSave != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuSwitchSave, fieldNumber: 2)
      }
      if _storage._playerDanmakuUseDefaultConfig != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuUseDefaultConfig, fieldNumber: 3)
      }
      if _storage._playerDanmakuAiRecommendedSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuAiRecommendedSwitch, fieldNumber: 4)
      }
      if _storage._playerDanmakuAiRecommendedLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuAiRecommendedLevel, fieldNumber: 5)
      }
      if _storage._playerDanmakuBlocktop != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlocktop, fieldNumber: 6)
      }
      if _storage._playerDanmakuBlockscroll != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockscroll, fieldNumber: 7)
      }
      if _storage._playerDanmakuBlockbottom != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockbottom, fieldNumber: 8)
      }
      if _storage._playerDanmakuBlockcolorful != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockcolorful, fieldNumber: 9)
      }
      if _storage._playerDanmakuBlockrepeat != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockrepeat, fieldNumber: 10)
      }
      if _storage._playerDanmakuBlockspecial != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuBlockspecial, fieldNumber: 11)
      }
      if _storage._playerDanmakuOpacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._playerDanmakuOpacity, fieldNumber: 12)
      }
      if _storage._playerDanmakuScalingfactor != 0 {
        try visitor.visitSingularFloatField(value: _storage._playerDanmakuScalingfactor, fieldNumber: 13)
      }
      if _storage._playerDanmakuDomain != 0 {
        try visitor.visitSingularFloatField(value: _storage._playerDanmakuDomain, fieldNumber: 14)
      }
      if _storage._playerDanmakuSpeed != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuSpeed, fieldNumber: 15)
      }
      if _storage._playerDanmakuEnableblocklist != false {
        try visitor.visitSingularBoolField(value: _storage._playerDanmakuEnableblocklist, fieldNumber: 16)
      }
      if _storage._inlinePlayerDanmakuSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._inlinePlayerDanmakuSwitch, fieldNumber: 17)
      }
      if _storage._inlinePlayerDanmakuConfig != 0 {
        try visitor.visitSingularInt32Field(value: _storage._inlinePlayerDanmakuConfig, fieldNumber: 18)
      }
      if _storage._playerDanmakuIosSwitchSave != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuIosSwitchSave, fieldNumber: 19)
      }
      if _storage._playerDanmakuSeniorModeSwitch != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuSeniorModeSwitch, fieldNumber: 20)
      }
      if _storage._playerDanmakuAiRecommendedLevelV2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._playerDanmakuAiRecommendedLevelV2, fieldNumber: 21)
      }
      if !_storage._playerDanmakuAiRecommendedLevelV2Map.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._playerDanmakuAiRecommendedLevelV2Map, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig, rhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._playerDanmakuSwitch != rhs_storage._playerDanmakuSwitch {return false}
        if _storage._playerDanmakuSwitchSave != rhs_storage._playerDanmakuSwitchSave {return false}
        if _storage._playerDanmakuUseDefaultConfig != rhs_storage._playerDanmakuUseDefaultConfig {return false}
        if _storage._playerDanmakuAiRecommendedSwitch != rhs_storage._playerDanmakuAiRecommendedSwitch {return false}
        if _storage._playerDanmakuAiRecommendedLevel != rhs_storage._playerDanmakuAiRecommendedLevel {return false}
        if _storage._playerDanmakuBlocktop != rhs_storage._playerDanmakuBlocktop {return false}
        if _storage._playerDanmakuBlockscroll != rhs_storage._playerDanmakuBlockscroll {return false}
        if _storage._playerDanmakuBlockbottom != rhs_storage._playerDanmakuBlockbottom {return false}
        if _storage._playerDanmakuBlockcolorful != rhs_storage._playerDanmakuBlockcolorful {return false}
        if _storage._playerDanmakuBlockrepeat != rhs_storage._playerDanmakuBlockrepeat {return false}
        if _storage._playerDanmakuBlockspecial != rhs_storage._playerDanmakuBlockspecial {return false}
        if _storage._playerDanmakuOpacity != rhs_storage._playerDanmakuOpacity {return false}
        if _storage._playerDanmakuScalingfactor != rhs_storage._playerDanmakuScalingfactor {return false}
        if _storage._playerDanmakuDomain != rhs_storage._playerDanmakuDomain {return false}
        if _storage._playerDanmakuSpeed != rhs_storage._playerDanmakuSpeed {return false}
        if _storage._playerDanmakuEnableblocklist != rhs_storage._playerDanmakuEnableblocklist {return false}
        if _storage._inlinePlayerDanmakuSwitch != rhs_storage._inlinePlayerDanmakuSwitch {return false}
        if _storage._inlinePlayerDanmakuConfig != rhs_storage._inlinePlayerDanmakuConfig {return false}
        if _storage._playerDanmakuIosSwitchSave != rhs_storage._playerDanmakuIosSwitchSave {return false}
        if _storage._playerDanmakuSeniorModeSwitch != rhs_storage._playerDanmakuSeniorModeSwitch {return false}
        if _storage._playerDanmakuAiRecommendedLevelV2 != rhs_storage._playerDanmakuAiRecommendedLevelV2 {return false}
        if _storage._playerDanmakuAiRecommendedLevelV2Map != rhs_storage._playerDanmakuAiRecommendedLevelV2Map {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmuPlayerConfigPanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "selection_text"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.selectionText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.selectionText.isEmpty {
      try visitor.visitSingularStringField(value: self.selectionText, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel, rhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerConfigPanel) -> Bool {
    if lhs.selectionText != rhs.selectionText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmuPlayerDynamicConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmuPlayerDynamicConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "progress"),
    14: .standard(proto: "player_danmaku_domain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.progress) }()
      case 14: try { try decoder.decodeSingularFloatField(value: &self.playerDanmakuDomain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.progress != 0 {
      try visitor.visitSingularInt32Field(value: self.progress, fieldNumber: 1)
    }
    if self.playerDanmakuDomain != 0 {
      try visitor.visitSingularFloatField(value: self.playerDanmakuDomain, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerDynamicConfig, rhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerDynamicConfig) -> Bool {
    if lhs.progress != rhs.progress {return false}
    if lhs.playerDanmakuDomain != rhs.playerDanmakuDomain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmuPlayerViewConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "danmuku_default_player_config"),
    2: .standard(proto: "danmuku_player_config"),
    3: .standard(proto: "danmuku_player_dynamic_config"),
    4: .standard(proto: "danmuku_player_config_panel"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._danmukuDefaultPlayerConfig) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._danmukuPlayerConfig) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.danmukuPlayerDynamicConfig) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._danmukuPlayerConfigPanel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._danmukuDefaultPlayerConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._danmukuPlayerConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.danmukuPlayerDynamicConfig.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.danmukuPlayerDynamicConfig, fieldNumber: 3)
    }
    try { if let v = self._danmukuPlayerConfigPanel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig, rhs: Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig) -> Bool {
    if lhs._danmukuDefaultPlayerConfig != rhs._danmukuDefaultPlayerConfig {return false}
    if lhs._danmukuPlayerConfig != rhs._danmukuPlayerConfig {return false}
    if lhs.danmukuPlayerDynamicConfig != rhs.danmukuPlayerDynamicConfig {return false}
    if lhs._danmukuPlayerConfigPanel != rhs._danmukuPlayerConfigPanel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DanmuWebPlayerConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dm_switch"),
    2: .standard(proto: "ai_switch"),
    3: .standard(proto: "ai_level"),
    4: .same(proto: "blocktop"),
    5: .same(proto: "blockscroll"),
    6: .same(proto: "blockbottom"),
    7: .same(proto: "blockcolor"),
    8: .same(proto: "blockspecial"),
    9: .same(proto: "preventshade"),
    10: .same(proto: "dmask"),
    11: .same(proto: "opacity"),
    12: .same(proto: "dmarea"),
    13: .same(proto: "speedplus"),
    14: .same(proto: "fontsize"),
    15: .same(proto: "screensync"),
    16: .same(proto: "speedsync"),
    17: .same(proto: "fontfamily"),
    18: .same(proto: "bold"),
    19: .same(proto: "fontborder"),
    20: .standard(proto: "draw_type"),
    21: .standard(proto: "senior_mode_switch"),
    22: .standard(proto: "ai_level_v2"),
    23: .standard(proto: "ai_level_v2_map"),
  ]

  fileprivate class _StorageClass {
    var _dmSwitch: Bool = false
    var _aiSwitch: Bool = false
    var _aiLevel: Int32 = 0
    var _blocktop: Bool = false
    var _blockscroll: Bool = false
    var _blockbottom: Bool = false
    var _blockcolor: Bool = false
    var _blockspecial: Bool = false
    var _preventshade: Bool = false
    var _dmask: Bool = false
    var _opacity: Float = 0
    var _dmarea: Int32 = 0
    var _speedplus: Float = 0
    var _fontsize: Float = 0
    var _screensync: Bool = false
    var _speedsync: Bool = false
    var _fontfamily: String = String()
    var _bold: Bool = false
    var _fontborder: Int32 = 0
    var _drawType: String = String()
    var _seniorModeSwitch: Int32 = 0
    var _aiLevelV2: Int32 = 0
    var _aiLevelV2Map: Dictionary<Int32,Int32> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dmSwitch = source._dmSwitch
      _aiSwitch = source._aiSwitch
      _aiLevel = source._aiLevel
      _blocktop = source._blocktop
      _blockscroll = source._blockscroll
      _blockbottom = source._blockbottom
      _blockcolor = source._blockcolor
      _blockspecial = source._blockspecial
      _preventshade = source._preventshade
      _dmask = source._dmask
      _opacity = source._opacity
      _dmarea = source._dmarea
      _speedplus = source._speedplus
      _fontsize = source._fontsize
      _screensync = source._screensync
      _speedsync = source._speedsync
      _fontfamily = source._fontfamily
      _bold = source._bold
      _fontborder = source._fontborder
      _drawType = source._drawType
      _seniorModeSwitch = source._seniorModeSwitch
      _aiLevelV2 = source._aiLevelV2
      _aiLevelV2Map = source._aiLevelV2Map
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._dmSwitch) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._aiSwitch) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._aiLevel) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._blocktop) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._blockscroll) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._blockbottom) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._blockcolor) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._blockspecial) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._preventshade) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._dmask) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._opacity) }()
        case 12: try { try decoder.decodeSingularInt32Field(value: &_storage._dmarea) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._speedplus) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._fontsize) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._screensync) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._speedsync) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._fontfamily) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._bold) }()
        case 19: try { try decoder.decodeSingularInt32Field(value: &_storage._fontborder) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._drawType) }()
        case 21: try { try decoder.decodeSingularInt32Field(value: &_storage._seniorModeSwitch) }()
        case 22: try { try decoder.decodeSingularInt32Field(value: &_storage._aiLevelV2) }()
        case 23: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &_storage._aiLevelV2Map) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._dmSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._dmSwitch, fieldNumber: 1)
      }
      if _storage._aiSwitch != false {
        try visitor.visitSingularBoolField(value: _storage._aiSwitch, fieldNumber: 2)
      }
      if _storage._aiLevel != 0 {
        try visitor.visitSingularInt32Field(value: _storage._aiLevel, fieldNumber: 3)
      }
      if _storage._blocktop != false {
        try visitor.visitSingularBoolField(value: _storage._blocktop, fieldNumber: 4)
      }
      if _storage._blockscroll != false {
        try visitor.visitSingularBoolField(value: _storage._blockscroll, fieldNumber: 5)
      }
      if _storage._blockbottom != false {
        try visitor.visitSingularBoolField(value: _storage._blockbottom, fieldNumber: 6)
      }
      if _storage._blockcolor != false {
        try visitor.visitSingularBoolField(value: _storage._blockcolor, fieldNumber: 7)
      }
      if _storage._blockspecial != false {
        try visitor.visitSingularBoolField(value: _storage._blockspecial, fieldNumber: 8)
      }
      if _storage._preventshade != false {
        try visitor.visitSingularBoolField(value: _storage._preventshade, fieldNumber: 9)
      }
      if _storage._dmask != false {
        try visitor.visitSingularBoolField(value: _storage._dmask, fieldNumber: 10)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 11)
      }
      if _storage._dmarea != 0 {
        try visitor.visitSingularInt32Field(value: _storage._dmarea, fieldNumber: 12)
      }
      if _storage._speedplus != 0 {
        try visitor.visitSingularFloatField(value: _storage._speedplus, fieldNumber: 13)
      }
      if _storage._fontsize != 0 {
        try visitor.visitSingularFloatField(value: _storage._fontsize, fieldNumber: 14)
      }
      if _storage._screensync != false {
        try visitor.visitSingularBoolField(value: _storage._screensync, fieldNumber: 15)
      }
      if _storage._speedsync != false {
        try visitor.visitSingularBoolField(value: _storage._speedsync, fieldNumber: 16)
      }
      if !_storage._fontfamily.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fontfamily, fieldNumber: 17)
      }
      if _storage._bold != false {
        try visitor.visitSingularBoolField(value: _storage._bold, fieldNumber: 18)
      }
      if _storage._fontborder != 0 {
        try visitor.visitSingularInt32Field(value: _storage._fontborder, fieldNumber: 19)
      }
      if !_storage._drawType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._drawType, fieldNumber: 20)
      }
      if _storage._seniorModeSwitch != 0 {
        try visitor.visitSingularInt32Field(value: _storage._seniorModeSwitch, fieldNumber: 21)
      }
      if _storage._aiLevelV2 != 0 {
        try visitor.visitSingularInt32Field(value: _storage._aiLevelV2, fieldNumber: 22)
      }
      if !_storage._aiLevelV2Map.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: _storage._aiLevelV2Map, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig, rhs: Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._dmSwitch != rhs_storage._dmSwitch {return false}
        if _storage._aiSwitch != rhs_storage._aiSwitch {return false}
        if _storage._aiLevel != rhs_storage._aiLevel {return false}
        if _storage._blocktop != rhs_storage._blocktop {return false}
        if _storage._blockscroll != rhs_storage._blockscroll {return false}
        if _storage._blockbottom != rhs_storage._blockbottom {return false}
        if _storage._blockcolor != rhs_storage._blockcolor {return false}
        if _storage._blockspecial != rhs_storage._blockspecial {return false}
        if _storage._preventshade != rhs_storage._preventshade {return false}
        if _storage._dmask != rhs_storage._dmask {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._dmarea != rhs_storage._dmarea {return false}
        if _storage._speedplus != rhs_storage._speedplus {return false}
        if _storage._fontsize != rhs_storage._fontsize {return false}
        if _storage._screensync != rhs_storage._screensync {return false}
        if _storage._speedsync != rhs_storage._speedsync {return false}
        if _storage._fontfamily != rhs_storage._fontfamily {return false}
        if _storage._bold != rhs_storage._bold {return false}
        if _storage._fontborder != rhs_storage._fontborder {return false}
        if _storage._drawType != rhs_storage._drawType {return false}
        if _storage._seniorModeSwitch != rhs_storage._seniorModeSwitch {return false}
        if _storage._aiLevelV2 != rhs_storage._aiLevelV2 {return false}
        if _storage._aiLevelV2Map != rhs_storage._aiLevelV2Map {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmColorful: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmColorful"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "src"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.src) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .noneType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.src.isEmpty {
      try visitor.visitSingularStringField(value: self.src, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmColorful, rhs: Bilibili_Community_Service_Dm_V1_DmColorful) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.src != rhs.src {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmExpoReportReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmExpoReportReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
    2: .same(proto: "oid"),
    4: .same(proto: "spmid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.spmid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sessionID.isEmpty {
      try visitor.visitSingularStringField(value: self.sessionID, fieldNumber: 1)
    }
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 2)
    }
    if !self.spmid.isEmpty {
      try visitor.visitSingularStringField(value: self.spmid, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmExpoReportReq, rhs: Bilibili_Community_Service_Dm_V1_DmExpoReportReq) -> Bool {
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.spmid != rhs.spmid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmExpoReportRes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmExpoReportRes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmExpoReportRes, rhs: Bilibili_Community_Service_Dm_V1_DmExpoReportRes) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmPlayerConfigReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmPlayerConfigReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ts"),
    2: .same(proto: "switch"),
    3: .standard(proto: "switch_save"),
    4: .standard(proto: "use_default_config"),
    5: .standard(proto: "ai_recommended_switch"),
    6: .standard(proto: "ai_recommended_level"),
    7: .same(proto: "blocktop"),
    8: .same(proto: "blockscroll"),
    9: .same(proto: "blockbottom"),
    10: .same(proto: "blockcolorful"),
    11: .same(proto: "blockrepeat"),
    12: .same(proto: "blockspecial"),
    13: .same(proto: "opacity"),
    14: .same(proto: "scalingfactor"),
    15: .same(proto: "domain"),
    16: .same(proto: "speed"),
    17: .same(proto: "enableblocklist"),
    18: .same(proto: "inlinePlayerDanmakuSwitch"),
    19: .standard(proto: "senior_mode_switch"),
    20: .standard(proto: "ai_recommended_level_v2"),
  ]

  fileprivate class _StorageClass {
    var _ts: Int64 = 0
    var _switch: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch? = nil
    var _switchSave: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave? = nil
    var _useDefaultConfig: Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig? = nil
    var _aiRecommendedSwitch: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch? = nil
    var _aiRecommendedLevel: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel? = nil
    var _blocktop: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop? = nil
    var _blockscroll: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll? = nil
    var _blockbottom: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom? = nil
    var _blockcolorful: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful? = nil
    var _blockrepeat: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat? = nil
    var _blockspecial: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial? = nil
    var _opacity: Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity? = nil
    var _scalingfactor: Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor? = nil
    var _domain: Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain? = nil
    var _speed: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed? = nil
    var _enableblocklist: Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist? = nil
    var _inlinePlayerDanmakuSwitch: Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch? = nil
    var _seniorModeSwitch: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch? = nil
    var _aiRecommendedLevelV2: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ts = source._ts
      _switch = source._switch
      _switchSave = source._switchSave
      _useDefaultConfig = source._useDefaultConfig
      _aiRecommendedSwitch = source._aiRecommendedSwitch
      _aiRecommendedLevel = source._aiRecommendedLevel
      _blocktop = source._blocktop
      _blockscroll = source._blockscroll
      _blockbottom = source._blockbottom
      _blockcolorful = source._blockcolorful
      _blockrepeat = source._blockrepeat
      _blockspecial = source._blockspecial
      _opacity = source._opacity
      _scalingfactor = source._scalingfactor
      _domain = source._domain
      _speed = source._speed
      _enableblocklist = source._enableblocklist
      _inlinePlayerDanmakuSwitch = source._inlinePlayerDanmakuSwitch
      _seniorModeSwitch = source._seniorModeSwitch
      _aiRecommendedLevelV2 = source._aiRecommendedLevelV2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._ts) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._switch) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._switchSave) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._useDefaultConfig) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._aiRecommendedSwitch) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._aiRecommendedLevel) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._blocktop) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._blockscroll) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._blockbottom) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._blockcolorful) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._blockrepeat) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._blockspecial) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._opacity) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._scalingfactor) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._domain) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._speed) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._enableblocklist) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._inlinePlayerDanmakuSwitch) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._seniorModeSwitch) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._aiRecommendedLevelV2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._ts != 0 {
        try visitor.visitSingularInt64Field(value: _storage._ts, fieldNumber: 1)
      }
      try { if let v = _storage._switch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._switchSave {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._useDefaultConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._aiRecommendedSwitch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._aiRecommendedLevel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._blocktop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._blockscroll {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._blockbottom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._blockcolorful {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._blockrepeat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._blockspecial {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._scalingfactor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._domain {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._speed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._enableblocklist {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._inlinePlayerDanmakuSwitch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._seniorModeSwitch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._aiRecommendedLevelV2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmPlayerConfigReq, rhs: Bilibili_Community_Service_Dm_V1_DmPlayerConfigReq) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ts != rhs_storage._ts {return false}
        if _storage._switch != rhs_storage._switch {return false}
        if _storage._switchSave != rhs_storage._switchSave {return false}
        if _storage._useDefaultConfig != rhs_storage._useDefaultConfig {return false}
        if _storage._aiRecommendedSwitch != rhs_storage._aiRecommendedSwitch {return false}
        if _storage._aiRecommendedLevel != rhs_storage._aiRecommendedLevel {return false}
        if _storage._blocktop != rhs_storage._blocktop {return false}
        if _storage._blockscroll != rhs_storage._blockscroll {return false}
        if _storage._blockbottom != rhs_storage._blockbottom {return false}
        if _storage._blockcolorful != rhs_storage._blockcolorful {return false}
        if _storage._blockrepeat != rhs_storage._blockrepeat {return false}
        if _storage._blockspecial != rhs_storage._blockspecial {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._scalingfactor != rhs_storage._scalingfactor {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._speed != rhs_storage._speed {return false}
        if _storage._enableblocklist != rhs_storage._enableblocklist {return false}
        if _storage._inlinePlayerDanmakuSwitch != rhs_storage._inlinePlayerDanmakuSwitch {return false}
        if _storage._seniorModeSwitch != rhs_storage._seniorModeSwitch {return false}
        if _storage._aiRecommendedLevelV2 != rhs_storage._aiRecommendedLevelV2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "page_size"),
    2: .same(proto: "total"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.pageSize) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.total) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pageSize != 0 {
      try visitor.visitSingularInt64Field(value: self.pageSize, fieldNumber: 1)
    }
    if self.total != 0 {
      try visitor.visitSingularInt64Field(value: self.total, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegConfig, rhs: Bilibili_Community_Service_Dm_V1_DmSegConfig) -> Bool {
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.total != rhs.total {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegMobileReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegMobileReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "elems"),
    2: .same(proto: "state"),
    3: .standard(proto: "ai_flag"),
    5: .same(proto: "colorfulSrc"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.elems) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.state) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._aiFlag) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.colorfulSrc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.elems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elems, fieldNumber: 1)
    }
    if self.state != 0 {
      try visitor.visitSingularInt32Field(value: self.state, fieldNumber: 2)
    }
    try { if let v = self._aiFlag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.colorfulSrc.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.colorfulSrc, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegMobileReply, rhs: Bilibili_Community_Service_Dm_V1_DmSegMobileReply) -> Bool {
    if lhs.elems != rhs.elems {return false}
    if lhs.state != rhs.state {return false}
    if lhs._aiFlag != rhs._aiFlag {return false}
    if lhs.colorfulSrc != rhs.colorfulSrc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegMobileReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegMobileReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pid"),
    2: .same(proto: "oid"),
    3: .same(proto: "type"),
    4: .standard(proto: "segment_index"),
    5: .standard(proto: "teenagers_mode"),
    6: .same(proto: "ps"),
    7: .same(proto: "pe"),
    8: .standard(proto: "pull_mode"),
    9: .standard(proto: "from_scene"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.pid) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.segmentIndex) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.teenagersMode) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.ps) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.pe) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self.pullMode) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.fromScene) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pid != 0 {
      try visitor.visitSingularInt64Field(value: self.pid, fieldNumber: 1)
    }
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if self.segmentIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.segmentIndex, fieldNumber: 4)
    }
    if self.teenagersMode != 0 {
      try visitor.visitSingularInt32Field(value: self.teenagersMode, fieldNumber: 5)
    }
    if self.ps != 0 {
      try visitor.visitSingularInt64Field(value: self.ps, fieldNumber: 6)
    }
    if self.pe != 0 {
      try visitor.visitSingularInt64Field(value: self.pe, fieldNumber: 7)
    }
    if self.pullMode != 0 {
      try visitor.visitSingularInt32Field(value: self.pullMode, fieldNumber: 8)
    }
    if self.fromScene != 0 {
      try visitor.visitSingularInt32Field(value: self.fromScene, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegMobileReq, rhs: Bilibili_Community_Service_Dm_V1_DmSegMobileReq) -> Bool {
    if lhs.pid != rhs.pid {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.segmentIndex != rhs.segmentIndex {return false}
    if lhs.teenagersMode != rhs.teenagersMode {return false}
    if lhs.ps != rhs.ps {return false}
    if lhs.pe != rhs.pe {return false}
    if lhs.pullMode != rhs.pullMode {return false}
    if lhs.fromScene != rhs.fromScene {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegOttReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegOttReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "closed"),
    2: .same(proto: "elems"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.closed) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.elems) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.closed != false {
      try visitor.visitSingularBoolField(value: self.closed, fieldNumber: 1)
    }
    if !self.elems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elems, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegOttReply, rhs: Bilibili_Community_Service_Dm_V1_DmSegOttReply) -> Bool {
    if lhs.closed != rhs.closed {return false}
    if lhs.elems != rhs.elems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegOttReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegOttReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pid"),
    2: .same(proto: "oid"),
    3: .same(proto: "type"),
    4: .standard(proto: "segment_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.pid) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.segmentIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pid != 0 {
      try visitor.visitSingularInt64Field(value: self.pid, fieldNumber: 1)
    }
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if self.segmentIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.segmentIndex, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegOttReq, rhs: Bilibili_Community_Service_Dm_V1_DmSegOttReq) -> Bool {
    if lhs.pid != rhs.pid {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.segmentIndex != rhs.segmentIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegSDKReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegSDKReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "closed"),
    2: .same(proto: "elems"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.closed) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.elems) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.closed != false {
      try visitor.visitSingularBoolField(value: self.closed, fieldNumber: 1)
    }
    if !self.elems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elems, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegSDKReply, rhs: Bilibili_Community_Service_Dm_V1_DmSegSDKReply) -> Bool {
    if lhs.closed != rhs.closed {return false}
    if lhs.elems != rhs.elems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmSegSDKReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmSegSDKReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pid"),
    2: .same(proto: "oid"),
    3: .same(proto: "type"),
    4: .standard(proto: "segment_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.pid) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.segmentIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pid != 0 {
      try visitor.visitSingularInt64Field(value: self.pid, fieldNumber: 1)
    }
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if self.segmentIndex != 0 {
      try visitor.visitSingularInt64Field(value: self.segmentIndex, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmSegSDKReq, rhs: Bilibili_Community_Service_Dm_V1_DmSegSDKReq) -> Bool {
    if lhs.pid != rhs.pid {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.segmentIndex != rhs.segmentIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmViewReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmViewReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "closed"),
    2: .same(proto: "mask"),
    3: .same(proto: "subtitle"),
    4: .standard(proto: "special_dms"),
    5: .standard(proto: "ai_flag"),
    6: .standard(proto: "player_config"),
    7: .standard(proto: "send_box_style"),
    8: .same(proto: "allow"),
    9: .standard(proto: "check_box"),
    10: .standard(proto: "check_box_show_msg"),
    11: .standard(proto: "text_placeholder"),
    12: .standard(proto: "input_placeholder"),
    13: .standard(proto: "report_filter_content"),
    14: .standard(proto: "expo_report"),
    15: .standard(proto: "buzzword_config"),
    16: .same(proto: "expressions"),
    17: .standard(proto: "post_panel"),
    18: .standard(proto: "activity_meta"),
    19: .standard(proto: "post_panel2"),
  ]

  fileprivate class _StorageClass {
    var _closed: Bool = false
    var _mask: Bilibili_Community_Service_Dm_V1_VideoMask? = nil
    var _subtitle: Bilibili_Community_Service_Dm_V1_VideoSubtitle? = nil
    var _specialDms: [String] = []
    var _aiFlag: Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig? = nil
    var _playerConfig: Bilibili_Community_Service_Dm_V1_DanmuPlayerViewConfig? = nil
    var _sendBoxStyle: Int32 = 0
    var _allow: Bool = false
    var _checkBox: String = String()
    var _checkBoxShowMsg: String = String()
    var _textPlaceholder: String = String()
    var _inputPlaceholder: String = String()
    var _reportFilterContent: [String] = []
    var _expoReport: Bilibili_Community_Service_Dm_V1_ExpoReport? = nil
    var _buzzwordConfig: Bilibili_Community_Service_Dm_V1_BuzzwordConfig? = nil
    var _expressions: [Bilibili_Community_Service_Dm_V1_Expressions] = []
    var _postPanel: [Bilibili_Community_Service_Dm_V1_PostPanel] = []
    var _activityMeta: [String] = []
    var _postPanel2: [Bilibili_Community_Service_Dm_V1_PostPanelV2] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _closed = source._closed
      _mask = source._mask
      _subtitle = source._subtitle
      _specialDms = source._specialDms
      _aiFlag = source._aiFlag
      _playerConfig = source._playerConfig
      _sendBoxStyle = source._sendBoxStyle
      _allow = source._allow
      _checkBox = source._checkBox
      _checkBoxShowMsg = source._checkBoxShowMsg
      _textPlaceholder = source._textPlaceholder
      _inputPlaceholder = source._inputPlaceholder
      _reportFilterContent = source._reportFilterContent
      _expoReport = source._expoReport
      _buzzwordConfig = source._buzzwordConfig
      _expressions = source._expressions
      _postPanel = source._postPanel
      _activityMeta = source._activityMeta
      _postPanel2 = source._postPanel2
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._closed) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._mask) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._subtitle) }()
        case 4: try { try decoder.decodeRepeatedStringField(value: &_storage._specialDms) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._aiFlag) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._playerConfig) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._sendBoxStyle) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._allow) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._checkBox) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._checkBoxShowMsg) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._textPlaceholder) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._inputPlaceholder) }()
        case 13: try { try decoder.decodeRepeatedStringField(value: &_storage._reportFilterContent) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._expoReport) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._buzzwordConfig) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._expressions) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._postPanel) }()
        case 18: try { try decoder.decodeRepeatedStringField(value: &_storage._activityMeta) }()
        case 19: try { try decoder.decodeRepeatedMessageField(value: &_storage._postPanel2) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._closed != false {
        try visitor.visitSingularBoolField(value: _storage._closed, fieldNumber: 1)
      }
      try { if let v = _storage._mask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._subtitle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._specialDms.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._specialDms, fieldNumber: 4)
      }
      try { if let v = _storage._aiFlag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._playerConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if _storage._sendBoxStyle != 0 {
        try visitor.visitSingularInt32Field(value: _storage._sendBoxStyle, fieldNumber: 7)
      }
      if _storage._allow != false {
        try visitor.visitSingularBoolField(value: _storage._allow, fieldNumber: 8)
      }
      if !_storage._checkBox.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkBox, fieldNumber: 9)
      }
      if !_storage._checkBoxShowMsg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkBoxShowMsg, fieldNumber: 10)
      }
      if !_storage._textPlaceholder.isEmpty {
        try visitor.visitSingularStringField(value: _storage._textPlaceholder, fieldNumber: 11)
      }
      if !_storage._inputPlaceholder.isEmpty {
        try visitor.visitSingularStringField(value: _storage._inputPlaceholder, fieldNumber: 12)
      }
      if !_storage._reportFilterContent.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._reportFilterContent, fieldNumber: 13)
      }
      try { if let v = _storage._expoReport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._buzzwordConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._expressions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._expressions, fieldNumber: 16)
      }
      if !_storage._postPanel.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._postPanel, fieldNumber: 17)
      }
      if !_storage._activityMeta.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._activityMeta, fieldNumber: 18)
      }
      if !_storage._postPanel2.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._postPanel2, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmViewReply, rhs: Bilibili_Community_Service_Dm_V1_DmViewReply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._closed != rhs_storage._closed {return false}
        if _storage._mask != rhs_storage._mask {return false}
        if _storage._subtitle != rhs_storage._subtitle {return false}
        if _storage._specialDms != rhs_storage._specialDms {return false}
        if _storage._aiFlag != rhs_storage._aiFlag {return false}
        if _storage._playerConfig != rhs_storage._playerConfig {return false}
        if _storage._sendBoxStyle != rhs_storage._sendBoxStyle {return false}
        if _storage._allow != rhs_storage._allow {return false}
        if _storage._checkBox != rhs_storage._checkBox {return false}
        if _storage._checkBoxShowMsg != rhs_storage._checkBoxShowMsg {return false}
        if _storage._textPlaceholder != rhs_storage._textPlaceholder {return false}
        if _storage._inputPlaceholder != rhs_storage._inputPlaceholder {return false}
        if _storage._reportFilterContent != rhs_storage._reportFilterContent {return false}
        if _storage._expoReport != rhs_storage._expoReport {return false}
        if _storage._buzzwordConfig != rhs_storage._buzzwordConfig {return false}
        if _storage._expressions != rhs_storage._expressions {return false}
        if _storage._postPanel != rhs_storage._postPanel {return false}
        if _storage._activityMeta != rhs_storage._activityMeta {return false}
        if _storage._postPanel2 != rhs_storage._postPanel2 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmViewReq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmViewReq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pid"),
    2: .same(proto: "oid"),
    3: .same(proto: "type"),
    4: .same(proto: "spmid"),
    5: .standard(proto: "is_hard_boot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.pid) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.oid) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.type) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.spmid) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.isHardBoot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pid != 0 {
      try visitor.visitSingularInt64Field(value: self.pid, fieldNumber: 1)
    }
    if self.oid != 0 {
      try visitor.visitSingularInt64Field(value: self.oid, fieldNumber: 2)
    }
    if self.type != 0 {
      try visitor.visitSingularInt32Field(value: self.type, fieldNumber: 3)
    }
    if !self.spmid.isEmpty {
      try visitor.visitSingularStringField(value: self.spmid, fieldNumber: 4)
    }
    if self.isHardBoot != 0 {
      try visitor.visitSingularInt32Field(value: self.isHardBoot, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmViewReq, rhs: Bilibili_Community_Service_Dm_V1_DmViewReq) -> Bool {
    if lhs.pid != rhs.pid {return false}
    if lhs.oid != rhs.oid {return false}
    if lhs.type != rhs.type {return false}
    if lhs.spmid != rhs.spmid {return false}
    if lhs.isHardBoot != rhs.isHardBoot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_DmWebViewReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DmWebViewReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "text"),
    3: .standard(proto: "text_side"),
    4: .standard(proto: "dm_sge"),
    5: .same(proto: "flag"),
    6: .standard(proto: "special_dms"),
    7: .standard(proto: "check_box"),
    8: .same(proto: "count"),
    9: .same(proto: "commandDms"),
    10: .standard(proto: "player_config"),
    11: .standard(proto: "report_filter_content"),
    12: .same(proto: "expressions"),
    13: .standard(proto: "post_panel"),
    14: .standard(proto: "activity_meta"),
  ]

  fileprivate class _StorageClass {
    var _state: Int32 = 0
    var _text: String = String()
    var _textSide: String = String()
    var _dmSge: Bilibili_Community_Service_Dm_V1_DmSegConfig? = nil
    var _flag: Bilibili_Community_Service_Dm_V1_DanmakuFlagConfig? = nil
    var _specialDms: [String] = []
    var _checkBox: Bool = false
    var _count: Int64 = 0
    var _commandDms: [Bilibili_Community_Service_Dm_V1_CommandDm] = []
    var _playerConfig: Bilibili_Community_Service_Dm_V1_DanmuWebPlayerConfig? = nil
    var _reportFilterContent: [String] = []
    var _expressions: [Bilibili_Community_Service_Dm_V1_Expressions] = []
    var _postPanel: [Bilibili_Community_Service_Dm_V1_PostPanel] = []
    var _activityMeta: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _text = source._text
      _textSide = source._textSide
      _dmSge = source._dmSge
      _flag = source._flag
      _specialDms = source._specialDms
      _checkBox = source._checkBox
      _count = source._count
      _commandDms = source._commandDms
      _playerConfig = source._playerConfig
      _reportFilterContent = source._reportFilterContent
      _expressions = source._expressions
      _postPanel = source._postPanel
      _activityMeta = source._activityMeta
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._state) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._text) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._textSide) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._dmSge) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._flag) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._specialDms) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._checkBox) }()
        case 8: try { try decoder.decodeSingularInt64Field(value: &_storage._count) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._commandDms) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._playerConfig) }()
        case 11: try { try decoder.decodeRepeatedStringField(value: &_storage._reportFilterContent) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._expressions) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._postPanel) }()
        case 14: try { try decoder.decodeRepeatedStringField(value: &_storage._activityMeta) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._state != 0 {
        try visitor.visitSingularInt32Field(value: _storage._state, fieldNumber: 1)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 2)
      }
      if !_storage._textSide.isEmpty {
        try visitor.visitSingularStringField(value: _storage._textSide, fieldNumber: 3)
      }
      try { if let v = _storage._dmSge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._flag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._specialDms.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._specialDms, fieldNumber: 6)
      }
      if _storage._checkBox != false {
        try visitor.visitSingularBoolField(value: _storage._checkBox, fieldNumber: 7)
      }
      if _storage._count != 0 {
        try visitor.visitSingularInt64Field(value: _storage._count, fieldNumber: 8)
      }
      if !_storage._commandDms.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commandDms, fieldNumber: 9)
      }
      try { if let v = _storage._playerConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._reportFilterContent.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._reportFilterContent, fieldNumber: 11)
      }
      if !_storage._expressions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._expressions, fieldNumber: 12)
      }
      if !_storage._postPanel.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._postPanel, fieldNumber: 13)
      }
      if !_storage._activityMeta.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._activityMeta, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_DmWebViewReply, rhs: Bilibili_Community_Service_Dm_V1_DmWebViewReply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._text != rhs_storage._text {return false}
        if _storage._textSide != rhs_storage._textSide {return false}
        if _storage._dmSge != rhs_storage._dmSge {return false}
        if _storage._flag != rhs_storage._flag {return false}
        if _storage._specialDms != rhs_storage._specialDms {return false}
        if _storage._checkBox != rhs_storage._checkBox {return false}
        if _storage._count != rhs_storage._count {return false}
        if _storage._commandDms != rhs_storage._commandDms {return false}
        if _storage._playerConfig != rhs_storage._playerConfig {return false}
        if _storage._reportFilterContent != rhs_storage._reportFilterContent {return false}
        if _storage._expressions != rhs_storage._expressions {return false}
        if _storage._postPanel != rhs_storage._postPanel {return false}
        if _storage._activityMeta != rhs_storage._activityMeta {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_ExpoReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExpoReport"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "should_report_at_end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.shouldReportAtEnd) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.shouldReportAtEnd != false {
      try visitor.visitSingularBoolField(value: self.shouldReportAtEnd, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_ExpoReport, rhs: Bilibili_Community_Service_Dm_V1_ExpoReport) -> Bool {
    if lhs.shouldReportAtEnd != rhs.shouldReportAtEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Expression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Expression"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keyword"),
    2: .same(proto: "url"),
    3: .same(proto: "period"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.keyword) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.period) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyword.isEmpty {
      try visitor.visitRepeatedStringField(value: self.keyword, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.period.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.period, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Expression, rhs: Bilibili_Community_Service_Dm_V1_Expression) -> Bool {
    if lhs.keyword != rhs.keyword {return false}
    if lhs.url != rhs.url {return false}
    if lhs.period != rhs.period {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Expressions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Expressions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Expressions, rhs: Bilibili_Community_Service_Dm_V1_Expressions) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InlinePlayerDanmakuSwitch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch, rhs: Bilibili_Community_Service_Dm_V1_InlinePlayerDanmakuSwitch) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Label: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Label"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedStringField(value: self.content, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Label, rhs: Bilibili_Community_Service_Dm_V1_Label) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_LabelV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LabelV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "content"),
    3: .standard(proto: "exposure_once"),
    4: .standard(proto: "exposure_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.content) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.exposureOnce) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.exposureType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedStringField(value: self.content, fieldNumber: 2)
    }
    if self.exposureOnce != false {
      try visitor.visitSingularBoolField(value: self.exposureOnce, fieldNumber: 3)
    }
    if self.exposureType != 0 {
      try visitor.visitSingularInt32Field(value: self.exposureType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_LabelV2, rhs: Bilibili_Community_Service_Dm_V1_LabelV2) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.exposureOnce != rhs.exposureOnce {return false}
    if lhs.exposureType != rhs.exposureType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Period: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Period"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.start) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.end) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.start != 0 {
      try visitor.visitSingularInt64Field(value: self.start, fieldNumber: 1)
    }
    if self.end != 0 {
      try visitor.visitSingularInt64Field(value: self.end, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Period, rhs: Bilibili_Community_Service_Dm_V1_Period) -> Bool {
    if lhs.start != rhs.start {return false}
    if lhs.end != rhs.end {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuAiRecommendedLevel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevel) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuAiRecommendedLevelV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedLevelV2) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuAiRecommendedSwitch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuAiRecommendedSwitch) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuBlockbottom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockbottom) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuBlockcolorful"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockcolorful) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuBlockrepeat"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockrepeat) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuBlockscroll"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockscroll) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuBlockspecial"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlockspecial) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuBlocktop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuBlocktop) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuDomain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuDomain) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuEnableblocklist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuEnableblocklist) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuOpacity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuOpacity) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuScalingfactor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuScalingfactor) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuSeniorModeSwitch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSeniorModeSwitch) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuSpeed"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularInt32Field(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSpeed) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuSwitch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "can_ignore"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.canIgnore) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    if self.canIgnore != false {
      try visitor.visitSingularBoolField(value: self.canIgnore, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitch) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.canIgnore != rhs.canIgnore {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuSwitchSave"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuSwitchSave) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerDanmakuUseDefaultConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig, rhs: Bilibili_Community_Service_Dm_V1_PlayerDanmakuUseDefaultConfig) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PostPanel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostPanel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
    3: .same(proto: "priority"),
    4: .standard(proto: "biz_id"),
    5: .standard(proto: "biz_type"),
    6: .standard(proto: "click_button"),
    7: .standard(proto: "text_input"),
    8: .standard(proto: "check_box"),
    9: .same(proto: "toast"),
  ]

  fileprivate class _StorageClass {
    var _start: Int64 = 0
    var _end: Int64 = 0
    var _priority: Int64 = 0
    var _bizID: Int64 = 0
    var _bizType: Bilibili_Community_Service_Dm_V1_PostPanelBizType = .none
    var _clickButton: Bilibili_Community_Service_Dm_V1_ClickButton? = nil
    var _textInput: Bilibili_Community_Service_Dm_V1_TextInput? = nil
    var _checkBox: Bilibili_Community_Service_Dm_V1_CheckBox? = nil
    var _toast: Bilibili_Community_Service_Dm_V1_Toast? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
      _priority = source._priority
      _bizID = source._bizID
      _bizType = source._bizType
      _clickButton = source._clickButton
      _textInput = source._textInput
      _checkBox = source._checkBox
      _toast = source._toast
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._start) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._end) }()
        case 3: try { try decoder.decodeSingularInt64Field(value: &_storage._priority) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._bizID) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._bizType) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._clickButton) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._textInput) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._checkBox) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._toast) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._start != 0 {
        try visitor.visitSingularInt64Field(value: _storage._start, fieldNumber: 1)
      }
      if _storage._end != 0 {
        try visitor.visitSingularInt64Field(value: _storage._end, fieldNumber: 2)
      }
      if _storage._priority != 0 {
        try visitor.visitSingularInt64Field(value: _storage._priority, fieldNumber: 3)
      }
      if _storage._bizID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._bizID, fieldNumber: 4)
      }
      if _storage._bizType != .none {
        try visitor.visitSingularEnumField(value: _storage._bizType, fieldNumber: 5)
      }
      try { if let v = _storage._clickButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._textInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._checkBox {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._toast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PostPanel, rhs: Bilibili_Community_Service_Dm_V1_PostPanel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._priority != rhs_storage._priority {return false}
        if _storage._bizID != rhs_storage._bizID {return false}
        if _storage._bizType != rhs_storage._bizType {return false}
        if _storage._clickButton != rhs_storage._clickButton {return false}
        if _storage._textInput != rhs_storage._textInput {return false}
        if _storage._checkBox != rhs_storage._checkBox {return false}
        if _storage._toast != rhs_storage._toast {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_PostPanelV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PostPanelV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
    3: .standard(proto: "biz_type"),
    4: .standard(proto: "click_button"),
    5: .standard(proto: "text_input"),
    6: .standard(proto: "check_box"),
    7: .same(proto: "toast"),
    8: .same(proto: "bubble"),
    9: .same(proto: "label"),
    10: .standard(proto: "post_status"),
  ]

  fileprivate class _StorageClass {
    var _start: Int64 = 0
    var _end: Int64 = 0
    var _bizType: Int32 = 0
    var _clickButton: Bilibili_Community_Service_Dm_V1_ClickButtonV2? = nil
    var _textInput: Bilibili_Community_Service_Dm_V1_TextInputV2? = nil
    var _checkBox: Bilibili_Community_Service_Dm_V1_CheckBoxV2? = nil
    var _toast: Bilibili_Community_Service_Dm_V1_ToastV2? = nil
    var _bubble: Bilibili_Community_Service_Dm_V1_BubbleV2? = nil
    var _label: Bilibili_Community_Service_Dm_V1_LabelV2? = nil
    var _postStatus: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
      _bizType = source._bizType
      _clickButton = source._clickButton
      _textInput = source._textInput
      _checkBox = source._checkBox
      _toast = source._toast
      _bubble = source._bubble
      _label = source._label
      _postStatus = source._postStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt64Field(value: &_storage._start) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._end) }()
        case 3: try { try decoder.decodeSingularInt32Field(value: &_storage._bizType) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._clickButton) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._textInput) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._checkBox) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._toast) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._bubble) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._label) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._postStatus) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._start != 0 {
        try visitor.visitSingularInt64Field(value: _storage._start, fieldNumber: 1)
      }
      if _storage._end != 0 {
        try visitor.visitSingularInt64Field(value: _storage._end, fieldNumber: 2)
      }
      if _storage._bizType != 0 {
        try visitor.visitSingularInt32Field(value: _storage._bizType, fieldNumber: 3)
      }
      try { if let v = _storage._clickButton {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._textInput {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._checkBox {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._toast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._bubble {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._label {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if _storage._postStatus != 0 {
        try visitor.visitSingularInt32Field(value: _storage._postStatus, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_PostPanelV2, rhs: Bilibili_Community_Service_Dm_V1_PostPanelV2) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._bizType != rhs_storage._bizType {return false}
        if _storage._clickButton != rhs_storage._clickButton {return false}
        if _storage._textInput != rhs_storage._textInput {return false}
        if _storage._checkBox != rhs_storage._checkBox {return false}
        if _storage._toast != rhs_storage._toast {return false}
        if _storage._bubble != rhs_storage._bubble {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._postStatus != rhs_storage._postStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Response, rhs: Bilibili_Community_Service_Dm_V1_Response) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_SubtitleItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubtitleItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "id_str"),
    3: .same(proto: "lan"),
    4: .standard(proto: "lan_doc"),
    5: .standard(proto: "subtitle_url"),
    6: .same(proto: "author"),
    7: .same(proto: "type"),
    8: .standard(proto: "lan_doc_brief"),
    9: .standard(proto: "ai_type"),
    10: .standard(proto: "ai_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.idStr) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lan) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.lanDoc) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.subtitleURL) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._author) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.lanDocBrief) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.aiType) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.aiStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.idStr.isEmpty {
      try visitor.visitSingularStringField(value: self.idStr, fieldNumber: 2)
    }
    if !self.lan.isEmpty {
      try visitor.visitSingularStringField(value: self.lan, fieldNumber: 3)
    }
    if !self.lanDoc.isEmpty {
      try visitor.visitSingularStringField(value: self.lanDoc, fieldNumber: 4)
    }
    if !self.subtitleURL.isEmpty {
      try visitor.visitSingularStringField(value: self.subtitleURL, fieldNumber: 5)
    }
    try { if let v = self._author {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.type != .cc {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 7)
    }
    if !self.lanDocBrief.isEmpty {
      try visitor.visitSingularStringField(value: self.lanDocBrief, fieldNumber: 8)
    }
    if self.aiType != .normal {
      try visitor.visitSingularEnumField(value: self.aiType, fieldNumber: 9)
    }
    if self.aiStatus != .none {
      try visitor.visitSingularEnumField(value: self.aiStatus, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_SubtitleItem, rhs: Bilibili_Community_Service_Dm_V1_SubtitleItem) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.idStr != rhs.idStr {return false}
    if lhs.lan != rhs.lan {return false}
    if lhs.lanDoc != rhs.lanDoc {return false}
    if lhs.subtitleURL != rhs.subtitleURL {return false}
    if lhs._author != rhs._author {return false}
    if lhs.type != rhs.type {return false}
    if lhs.lanDocBrief != rhs.lanDocBrief {return false}
    if lhs.aiType != rhs.aiType {return false}
    if lhs.aiStatus != rhs.aiStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_TextInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextInput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "portrait_placeholder"),
    2: .standard(proto: "landscape_placeholder"),
    3: .standard(proto: "render_type"),
    4: .standard(proto: "placeholder_post"),
    5: .same(proto: "show"),
    6: .same(proto: "avatar"),
    7: .standard(proto: "post_status"),
    8: .same(proto: "label"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.portraitPlaceholder) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.landscapePlaceholder) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.placeholderPost) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.show) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.avatar) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.postStatus) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._label) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.portraitPlaceholder.isEmpty {
      try visitor.visitRepeatedStringField(value: self.portraitPlaceholder, fieldNumber: 1)
    }
    if !self.landscapePlaceholder.isEmpty {
      try visitor.visitRepeatedStringField(value: self.landscapePlaceholder, fieldNumber: 2)
    }
    if self.renderType != .none {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 3)
    }
    if self.placeholderPost != false {
      try visitor.visitSingularBoolField(value: self.placeholderPost, fieldNumber: 4)
    }
    if self.show != false {
      try visitor.visitSingularBoolField(value: self.show, fieldNumber: 5)
    }
    if !self.avatar.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.avatar, fieldNumber: 6)
    }
    if self.postStatus != .normal {
      try visitor.visitSingularEnumField(value: self.postStatus, fieldNumber: 7)
    }
    try { if let v = self._label {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_TextInput, rhs: Bilibili_Community_Service_Dm_V1_TextInput) -> Bool {
    if lhs.portraitPlaceholder != rhs.portraitPlaceholder {return false}
    if lhs.landscapePlaceholder != rhs.landscapePlaceholder {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.placeholderPost != rhs.placeholderPost {return false}
    if lhs.show != rhs.show {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.postStatus != rhs.postStatus {return false}
    if lhs._label != rhs._label {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_TextInputV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextInputV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "portrait_placeholder"),
    2: .standard(proto: "landscape_placeholder"),
    3: .standard(proto: "render_type"),
    4: .standard(proto: "placeholder_post"),
    5: .same(proto: "avatar"),
    6: .standard(proto: "text_input_limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.portraitPlaceholder) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.landscapePlaceholder) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.renderType) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.placeholderPost) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.avatar) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.textInputLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.portraitPlaceholder.isEmpty {
      try visitor.visitRepeatedStringField(value: self.portraitPlaceholder, fieldNumber: 1)
    }
    if !self.landscapePlaceholder.isEmpty {
      try visitor.visitRepeatedStringField(value: self.landscapePlaceholder, fieldNumber: 2)
    }
    if self.renderType != .none {
      try visitor.visitSingularEnumField(value: self.renderType, fieldNumber: 3)
    }
    if self.placeholderPost != false {
      try visitor.visitSingularBoolField(value: self.placeholderPost, fieldNumber: 4)
    }
    if !self.avatar.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.avatar, fieldNumber: 5)
    }
    if self.textInputLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.textInputLimit, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_TextInputV2, rhs: Bilibili_Community_Service_Dm_V1_TextInputV2) -> Bool {
    if lhs.portraitPlaceholder != rhs.portraitPlaceholder {return false}
    if lhs.landscapePlaceholder != rhs.landscapePlaceholder {return false}
    if lhs.renderType != rhs.renderType {return false}
    if lhs.placeholderPost != rhs.placeholderPost {return false}
    if lhs.avatar != rhs.avatar {return false}
    if lhs.textInputLimit != rhs.textInputLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_Toast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Toast"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "duration"),
    3: .same(proto: "show"),
    4: .same(proto: "button"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.duration) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.show) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._button) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt32Field(value: self.duration, fieldNumber: 2)
    }
    if self.show != false {
      try visitor.visitSingularBoolField(value: self.show, fieldNumber: 3)
    }
    try { if let v = self._button {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_Toast, rhs: Bilibili_Community_Service_Dm_V1_Toast) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.show != rhs.show {return false}
    if lhs._button != rhs._button {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_ToastButtonV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ToastButtonV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "action"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.action) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.action != 0 {
      try visitor.visitSingularInt32Field(value: self.action, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_ToastButtonV2, rhs: Bilibili_Community_Service_Dm_V1_ToastButtonV2) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_ToastV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ToastV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .same(proto: "duration"),
    3: .standard(proto: "toast_button_v2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.duration) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._toastButtonV2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt32Field(value: self.duration, fieldNumber: 2)
    }
    try { if let v = self._toastButtonV2 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_ToastV2, rhs: Bilibili_Community_Service_Dm_V1_ToastV2) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs._toastButtonV2 != rhs._toastButtonV2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_UserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mid"),
    2: .same(proto: "name"),
    3: .same(proto: "sex"),
    4: .same(proto: "face"),
    5: .same(proto: "sign"),
    6: .same(proto: "rank"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.mid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sex) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.face) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sign) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self.rank) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mid != 0 {
      try visitor.visitSingularInt64Field(value: self.mid, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.sex.isEmpty {
      try visitor.visitSingularStringField(value: self.sex, fieldNumber: 3)
    }
    if !self.face.isEmpty {
      try visitor.visitSingularStringField(value: self.face, fieldNumber: 4)
    }
    if !self.sign.isEmpty {
      try visitor.visitSingularStringField(value: self.sign, fieldNumber: 5)
    }
    if self.rank != 0 {
      try visitor.visitSingularInt32Field(value: self.rank, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_UserInfo, rhs: Bilibili_Community_Service_Dm_V1_UserInfo) -> Bool {
    if lhs.mid != rhs.mid {return false}
    if lhs.name != rhs.name {return false}
    if lhs.sex != rhs.sex {return false}
    if lhs.face != rhs.face {return false}
    if lhs.sign != rhs.sign {return false}
    if lhs.rank != rhs.rank {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_VideoMask: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoMask"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cid"),
    2: .same(proto: "plat"),
    3: .same(proto: "fps"),
    4: .same(proto: "time"),
    5: .standard(proto: "mask_url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.cid) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.plat) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.fps) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.time) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.maskURL) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cid != 0 {
      try visitor.visitSingularInt64Field(value: self.cid, fieldNumber: 1)
    }
    if self.plat != 0 {
      try visitor.visitSingularInt32Field(value: self.plat, fieldNumber: 2)
    }
    if self.fps != 0 {
      try visitor.visitSingularInt32Field(value: self.fps, fieldNumber: 3)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 4)
    }
    if !self.maskURL.isEmpty {
      try visitor.visitSingularStringField(value: self.maskURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_VideoMask, rhs: Bilibili_Community_Service_Dm_V1_VideoMask) -> Bool {
    if lhs.cid != rhs.cid {return false}
    if lhs.plat != rhs.plat {return false}
    if lhs.fps != rhs.fps {return false}
    if lhs.time != rhs.time {return false}
    if lhs.maskURL != rhs.maskURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bilibili_Community_Service_Dm_V1_VideoSubtitle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoSubtitle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lan"),
    2: .same(proto: "lanDoc"),
    3: .same(proto: "subtitles"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.lan) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lanDoc) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.subtitles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lan.isEmpty {
      try visitor.visitSingularStringField(value: self.lan, fieldNumber: 1)
    }
    if !self.lanDoc.isEmpty {
      try visitor.visitSingularStringField(value: self.lanDoc, fieldNumber: 2)
    }
    if !self.subtitles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subtitles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bilibili_Community_Service_Dm_V1_VideoSubtitle, rhs: Bilibili_Community_Service_Dm_V1_VideoSubtitle) -> Bool {
    if lhs.lan != rhs.lan {return false}
    if lhs.lanDoc != rhs.lanDoc {return false}
    if lhs.subtitles != rhs.subtitles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
